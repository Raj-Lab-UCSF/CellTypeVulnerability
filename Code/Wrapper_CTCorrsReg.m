%% 1. Run Nexis:global on all tau models and filter out low-performing datasets
clear; clc; rng(0);
matdir = '/Users/justintorok/Documents/MATLAB/CellTypeVulnerability_Project/CellTypeVulnerability/MatFiles';
load([matdir filesep 'OutputStruct_CTCorrsReg_allDS.mat']); % code below already run
datsetnames = studylist;
datsetnames(ismember(datsetnames,{'DS1','DS10','Clavaguera'})) = []; % negative control

% load([matdir filesep 'OutputStruct_CTCorrsReg.mat']); % code below already run
% load([matdir filesep 'eNDM_mousedata.mat'],'data426');
% studylist = fieldnames(data426).';
% studylist(ismember(studylist,{'BolundaCBD','BolundaDSAD'})) = [];
% load([matdir filesep 'KaufmanDiamond_datasets_dat&seed.mat'],'data426');
% studylist = [studylist fieldnames(data426).'];
% R2s = zeros(1,length(studylist));
% outputs_R2studies = struct;
% rng(0);
% 
% for i = 1:length(studylist)
%     outputs_ndm = stdNDM_mouse('study',studylist{i},'bootstrapping',0,...
%         'w_dir',0,'volcorrect',1);
%     R2s(i) = outputs_ndm.ndm.Full.results.lm_Rsquared_adj;
%     outputs_R2studies.(studylist{i}) = outputs_ndm.ndm.Full;
% end
% thresh = 0.25; % R across all timepoints > 0.5
% datsetnames = studylist(R2s > thresh);
% for i = 1:length(studylist)
%     if ~ismember(studylist{i},datsetnames)
%         outputs_R2studies = rmfield(outputs_R2studies,studylist{i});
%     end
% end
% save([matdir filesep 'OutputStruct_CTCorrsReg_allDS.mat']);

%% 2. Correlation plots
plotting = 1;
savenclose = 0;
ctdataset = 'Yao';
corrtype = 'Pearson';
addpath('/Users/justintorok/Documents/MATLAB/Nexis_Project/Nexis/MATLAB/lib_eNDM_general')
datapath = '/Users/justintorok/Documents/MATLAB/Nexis_Project/Nexis/raw_data_mouse';
datapath2 = '/Users/justintorok/Documents/MATLAB/MISS/MISS-MatFiles';
figdirectory = '/Users/justintorok/Documents/MATLAB/CellTypeVulnerability_Project/Figures/DraftFigs';

if strcmp(ctdataset,'Tasic')
    load([datapath2 filesep 'Tasic_AllGenes_Inputs.mat'],'genevct_allgenes')
    load([datapath2 filesep 'Tasic_Inputs.mat'],'genevct','GENGDmod',...
        'structList','structIndex','nonzerovox','classkey')
    load([datyeapath2 filesep 'MRx3_L90_inds.mat'],'geneinds')
    load([datapath2 filesep 'CellDensity_Tasic_nG606.mat'],'outstruct')
    subclasses = classkey;
    strepper1 = @(x) strrep(x,'_','-');
    subclasses = cellfun(strepper1,subclasses,'UniformOutput',0);
    strepper2 = @(x) strrep(x,'Macro','Micro');
    subclasses = cellfun(strepper2,subclasses,'UniformOutput',0);
    strepper3 = @(x) strrep(x,'L2-3','L2/3');
    subclasses = cellfun(strepper3,subclasses,'UniformOutput',0);
elseif strcmp(ctdataset,'Yao')
    load([datapath2 filesep 'Yao_outstruct_nG1300.mat'],'classkey','geneinds','outstruct');
    load([datapath2 filesep 'Yao_Inputs.mat'],'genevct','GENGDmod',...
        'structList','structIndex','nonzerovox','genevct_allgenes')
    subclasses = classkey;
end

ctmat = outstruct.Bmeans;
cmap = [[0 0.75 1]; [1 0 0.5]];
[corrmat_end,logpmat_end] = CorrelationCalculator_endtimepoint(datsetnames,...
    outputs_R2studies,ctmat,corrtype);
if plotting
    CorrelationBarPlot(corrmat_end,datsetnames,subclasses,corrtype,...
        cmap,savenclose,figdirectory);
    PValuePlot(logpmat_end,datsetnames,subclasses,corrtype,...
        copper(1000),cmap,savenclose,figdirectory);
    [classes,classmeans,pvals] = ClassViolinPlot(corrmat_end,subclasses,corrtype,...
        cmap,savenclose,figdirectory);
end

%% 3. Top 2 Cell Types, Brainframe
brainframedir = '/Users/justintorok/Documents/MATLAB/Brainframe-Dev/Brainframe';
addpath(brainframedir)
corrmat_end_mean = mean(corrmat_end);
[~,maxind] = max(corrmat_end_mean);
[~,minind] = min(corrmat_end_mean);
toptypeinds = [maxind,minind];
toptypes = subclasses(toptypeinds);

if strcmp(ctdataset,'Tasic')
% % Finish later       
%     nonneuronal_inds = ismember(subclasses,{'Endo','Astro','Oligo',...
%         'Macro'});
%     gaba_inds = ismember(subclasses,{'Lamp5','Sncg','Meis2','CR',...
%         'Pvalb','Sst','Serpinf1','Vip'});
%     ctxtest = @(x) strcmp(x(end),'X');
%     glutctx_inds = logical(cell2mat(cellfun(ctxtest,subclasses,'UniformOutput',false)));
%     gluthipp_inds = ~logical(nonneuronal_inds + gaba_inds + glutctx_inds);
%     indcell = {glutctx_inds,gluthipp_inds,gaba_inds,nonneuronal_inds};
%     indtest = glutctx_inds + 2*gluthipp_inds + 3*gaba_inds + 4*nonneuronal_inds;
elseif strcmp(ctdataset,'Yao')
    nonneuronal_inds = ismember(subclasses,{'Endo','Astro','Oligo',...
        'Micro-PVM','SMC-Peri','VLMC'});
    gaba_inds = ismember(subclasses,{'Lamp5','Sncg','Meis2','CR',...
        'Pvalb','Sst','Sst Chodl','Vip'});
    ctxtest = @(x) strcmp(x(end),'X');
    glutctx_inds = logical(cell2mat(cellfun(ctxtest,subclasses,'UniformOutput',false)));
    gluthipp_inds = ~logical(nonneuronal_inds + gaba_inds + glutctx_inds);
    indcell = {glutctx_inds,gluthipp_inds,gaba_inds,nonneuronal_inds};
    indtest = glutctx_inds + 2*gluthipp_inds + 3*gaba_inds + 4*nonneuronal_inds;
end
cmap_col = [[0 0.75 1]; [1 0 0.5]];
cmap = twocolor(cmap_col(1,:),cmap_col(2,:),length(indcell));
voxthreshes = [0.6,0.6];

datamat = outstruct.corrB; 
for i = 1:length(toptypeinds)
    ctdata = outstruct.corrB(:,toptypeinds(i));
    newVoxMap = zeros(size(GENGDmod));
    newVoxMap(nonzerovox) = ctdata;
    datinput = imresize3(newVoxMap,[133 81 115]);
    datinput(datinput < 0) = 0;
    col_base = cmap(indtest(toptypeinds(i)),:);
    col_min = (col_base + 1)/2;
    nbin = 10;
    cmap_i = twocolor(col_min,col_base,nbin);
%     cmap_i = twocolor(col_base,col_max,nbin);
    input_struct = brainframe_inputs_mouse(brainframedir,'data',datinput,...
                                                'voxthresh',voxthreshes(i),...
                                                'nbin',nbin,...
                                                'voxUreg',0,...
                                                'xfac',0.02,...
                                                'pointsize',0.1,...
                                                'bgcolor','w',...
                                                'img_format','tiffn',...
                                                'cmap',cmap_i,...
                                                'regsUbins',0,...
                                                'img_directory',figdirectory,...
                                                'img_labels',['Yao_' subclasses{toptypeinds(i)}],...
                                                'img_renderer','painters',...
                                                'savenclose',0);
    brainframe(input_struct);
end
%% 4. Cross-correlation matrices with hierarchical clustering
plotting = 1;
savenclose = 1;
corrtype = 'MRx3';
clusttype = 'MRx3';
linktype = 'ward';
disttype = 'euclidean';
genemat_allgenes = genevct_allgenes;
genemat_MRx3 = genevct(sort(geneinds(1:outstruct.nGen)),:);
ctmat = outstruct.Bmeans;
cmap_label = [[0 0.75 1]; [1 0 0.5]];
cmap = [];

if plotting
    ClusteringHeatmap(genemat_allgenes,genemat_MRx3,ctmat,subclasses,...
        ctdataset,corrtype,clusttype,cmap,cmap_label,disttype,linktype,...
        savenclose,figdirectory);
end


%% 5. Linear models
plotting = 1;
bicplotting = 0;
savenclose = 0;
usebic = 1;
numsigtypes = 5;
ctdataset = 'Yao';
corrtype = 'Pearson';
ctmat = outstruct.Bmeans;

[mdls_bic,subclasses_bic] = LinearModelSelection_BIC(datsetnames,outputs_R2studies,...
    ctmat,subclasses,corrtype,usebic,ctdataset,bicplotting,plotting,[],...
    savenclose,figdirectory);
[mdls_topN,subclasses_topN] = LinearModelSelection_TopN(datsetnames,...
    outputs_R2studies,ctmat,subclasses,numsigtypes,corrtype,ctdataset,plotting,...
    [],savenclose,figdirectory);
[mdls_all,subclasses_all] = LinearModelSelection_TopN(datsetnames,...
    outputs_R2studies,ctmat,subclasses,length(subclasses),corrtype,ctdataset,plotting,...
    [],savenclose,figdirectory);
CellTypeFrequencyPlot(subclasses,subclasses_bic,ctdataset,1,[[0 0.75 1]; [1 0 0.5]],...
    savenclose,figdirectory);
CellTypeFrequencyPlot(subclasses,subclasses_topN,ctdataset,0,[[0 0.75 1]; [1 0 0.5]],...
    savenclose,figdirectory);

%% 6. Hurtado per-timepoint

plotting = 1;
bicplotting = 0;
savenclose = 0;
usebic = 1;
% numsigtypes = 5;
ctdataset = 'Yao';
corrtype = 'Pearson';
datset = 'Hurtado';
ctmat = outstruct.Bmeans;
cmap = twocolor([0,1,0.25],[0.5,0,1],length(outputs_R2studies.(datset).time_stamps));

[mdls_bic_hurtado,subclasses_bic_hurtado,xcti,Y] = LinearModelSelection_BIC_alltpts(...
    datset,outputs_R2studies, ctmat,subclasses,corrtype,usebic,ctdataset,...
    bicplotting,plotting,cmap,savenclose,figdirectory);
% [mdls_topN,subclasses_topN] = LinearModelSelection_TopN(datsetnames,...
%     outputs_R2studies,ctmat,subclasses,numsigtypes,corrtype,ctdataset,plotting,...
%     savenclose,figdirectory);
% [mdls_all,subclasses_all] = LinearModelSelection_TopN(datsetnames,...
%     outputs_R2studies,ctmat,subclasses,length(subclasses),corrtype,ctdataset,plotting,...
%     savenclose,figdirectory);

%% 7a. Hurtado Brainframe, space-filling
brainframedir = '/Users/justintorok/Documents/MATLAB/Brainframe-Dev/Brainframe';
addpath(brainframedir)
datset = 'Hurtado';
tpts = outputs_R2studies.(datset).time_stamps;
savenclose = 1;
reggroups = zeros(213,1); %Chunk of code to define region_groups
amy = 1:11; cer = 12:23; sub = 24:26; hip = 27:37; hyp = 38:57; 
ncx = 58:95; med = 96:120; mid = 121:141; olf = 142:149; pal = 150:157;
pon = 158:170; str = 171:178; tha = 179:213;
reggroups(amy) = 1; reggroups(cer) = 2; reggroups(sub) = 3; 
reggroups(hip) = 4; reggroups(hyp) = 5; reggroups(ncx) = 6;
reggroups(med) = 7; reggroups(mid) = 8; reggroups(olf) = 9;
reggroups(pal) = 10; reggroups(pon) = 11; reggroups(str) = 12;
reggroups(tha) = 13;
reggroups = [reggroups;reggroups];
cmap = hsv(length(unique(reggroups))); %Creating colormap

for i = 1:length(tpts)
    datinput = outputs_R2studies.(datset).data(:,i);
    nany = isnan(datinput);
    datinput(nany) = 0;
    xfac = 15*(max(datinput)/max(outputs_R2studies.(datset).data(~nany,1)));
    imglab = sprintf('PathologyBrainframe_Data_%s_t%d_%s',datset,tpts(i),ctdataset);
    input_struct_data = brainframe_inputs_mouse(brainframedir,'data',datinput,...
                                                'voxUreg',1,...
                                                'xfac',xfac,...
                                                'pointsize',15,...
                                                'norm_method','max',...
                                                'bgcolor','w',...
                                                'img_format','tiffn',...
                                                'cmap',cmap,...
                                                'region_groups',reggroups,...
                                                'centered',[0 1],...
                                                'regsUbins',0,...
                                                'img_directory',figdirectory,...
                                                'img_labels',imglab,...
                                                'img_renderer','painters',...
                                                'savenclose',savenclose);
    brainframe(input_struct_data);

    mdlpred = mdls_bic_hurtado{i}.Fitted;
    mdlpred_1 = mdls_bic_hurtado{1}.Fitted;
    mdlpred_norm = (mdlpred - min(mdlpred));
    datinput = zeros(426,1);
    datinput(~nany) = mdlpred_norm;
    xfac = 15*max(mdlpred)/max(mdlpred_1);
    imglab = sprintf('PathologyBrainframe_Predicted_%s_t%d_%s',datset,tpts(i),ctdataset);
    input_struct_pred = brainframe_inputs_mouse(brainframedir,'data',datinput,...
                                                'voxUreg',1,...
                                                'xfac',xfac,...
                                                'pointsize',15,...
                                                'norm_method','max',...
                                                'bgcolor','w',...
                                                'img_format','tiffn',...
                                                'cmap',cmap,...
                                                'region_groups',reggroups,...
                                                'centered',[0 1],...
                                                'regsUbins',0,...
                                                'img_directory',figdirectory,...
                                                'img_labels',imglab,...
                                                'img_renderer','painters',...
                                                'savenclose',savenclose);
    brainframe(input_struct_pred);
end

%% 7b. Hurtado Brainframe, sphere
brainframedir = '/Users/justintorok/Documents/MATLAB/Brainframe-Dev/Brainframe';
addpath(brainframedir)
datset = 'Hurtado';
tpts = outputs_R2studies.(datset).time_stamps;
savenclose = 1;
reggroups = zeros(213,1); %Chunk of code to define region_groups
amy = 1:11; cer = 12:23; sub = 24:26; hip = 27:37; hyp = 38:57; 
ncx = 58:95; med = 96:120; mid = 121:141; olf = 142:149; pal = 150:157;
pon = 158:170; str = 171:178; tha = 179:213;
reggroups(amy) = 1; reggroups(cer) = 2; reggroups(sub) = 3; 
reggroups(hip) = 4; reggroups(hyp) = 5; reggroups(ncx) = 6;
reggroups(med) = 7; reggroups(mid) = 8; reggroups(olf) = 9;
reggroups(pal) = 10; reggroups(pon) = 11; reggroups(str) = 12;
reggroups(tha) = 13;
reggroups = [reggroups;reggroups];
cmap = hsv(length(unique(reggroups))); %Creating colormap

for i = 1:length(tpts)
    datinput = outputs_R2studies.(datset).data(:,i);
    nany = isnan(datinput);
    datinput(nany) = 0;
    xfac = 1.5*(max(datinput)/max(outputs_R2studies.(datset).data(~nany,1)))^0.5;
    imglab = sprintf('PathologyBrainframe_Data_%s_t%d_%s_sphere',datset,tpts(i),ctdataset);
    input_struct_data = brainframe_inputs_mouse(brainframedir,'data',datinput,...
                                                'voxUreg',1,...
                                                'xfac',xfac,...
                                                'pointsize',10,...
                                                'norm_method','max',...
                                                'bgcolor','w',...
                                                'img_format','tiffn',...
                                                'cmap',cmap,...
                                                'region_groups',reggroups,...
                                                'sphere',1,...
                                                'sphere_npts',20,...
                                                'regsUbins',0,...
                                                'img_directory',figdirectory,...
                                                'img_labels',imglab,...
                                                'img_renderer','painters',...
                                                'savenclose',savenclose);
    brainframe(input_struct_data);

    mdlpred = mdls_bic_hurtado{i}.Fitted;
    mdlpred_1 = mdls_bic_hurtado{1}.Fitted;
    mdlpred_norm = (mdlpred - min(mdlpred));
    datinput = zeros(426,1);
    datinput(~nany) = mdlpred_norm;
    xfac = 1.5*(max(mdlpred)/max(mdlpred_1))^0.5;
    imglab = sprintf('PathologyBrainframe_Predicted_%s_t%d_%s_sphere',datset,tpts(i),ctdataset);
    input_struct_pred = brainframe_inputs_mouse(brainframedir,'data',datinput,...
                                                'voxUreg',1,...
                                                'xfac',xfac,...
                                                'pointsize',10,...
                                                'norm_method','max',...
                                                'bgcolor','w',...
                                                'img_format','tiffn',...
                                                'cmap',cmap,...
                                                'region_groups',reggroups,...
                                                'sphere',1,...
                                                'sphere_npts',20,...
                                                'regsUbins',0,...
                                                'img_directory',figdirectory,...
                                                'img_labels',imglab,...
                                                'img_renderer','painters',...
                                                'savenclose',savenclose);
    brainframe(input_struct_pred);
end


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% %% 4. Ridge-based cell-type subset selection w.r.t. t(end) tau pathology 
% rng(0);
% lambdas = 2.^linspace(0,12,200);
% lambdas_min = zeros(1,length(datsetnames));
% lambdas_1se = lambdas_min;
% sigtypeinds_min = cell(1,length(datsetnames));
% sigtypeinds_1se = sigtypeinds_min; sigtypeinds_0 = sigtypeinds_min;
% sigtypeinds_min_med = cell(1,length(datsetnames));
% sigtypeinds_1se_med = sigtypeinds_min; sigtypeinds_0_med = sigtypeinds_min;
% B_mins = sigtypeinds_min; B_1ses = sigtypeinds_min; B_0s = sigtypeinds_min;
% kfold = 10;
% 
% plotting = 0;
% savenclose = 0;
% if plotting
%     f1 = figure('Units','inches','Position',[0,0,20,10]);
% end
% for i = 1:length(datsetnames)
%     % K-fold cross-validation for ridge regression
%     datsetname = datsetnames{i};
%     fprintf('Finding Optimal Lambda, %s \n',datsetname)
%     Y = outputs_R2studies.(datsetname).data;
%     naninds = isnan(Y(:,1));
%     Y_end = Y(~naninds,end);
%     Xct = Yao_nG1300(~naninds,:);
% %     Xct = Tasic_ng606(~naninds,:);
%     Xct_sums = repmat(mean(Xct),size(Xct,1),1);
%     Xct_norm = Xct./Xct_sums;
%     c = cvpartition(length(Y_end),'KFold',kfold);
%     residuals_sq = zeros(kfold,length(lambdas));
%     for k = 1:kfold
%         testinds = test(c,k);
%         Y_k_test = Y_end(testinds); Xct_k_test = Xct_norm(testinds,:);
%         traininds = ~testinds;
%         Y_k_train = Y_end(traininds); Xct_k_train = Xct_norm(traininds,:);
%         B = ridge(Y_k_train,Xct_k_train,lambdas,1);
%         Y_k_test_mat = repmat(Y_k_test,1,length(lambdas));
%         Y_k_test_mat_pred = Xct_k_test * B;
%         Y_k_train_mat_pred = Xct_k_train * B;
%         Y_diff_sq = (Y_k_test_mat - Y_k_test_mat_pred).^2;
%         residuals_sq(k,:) = sum(Y_diff_sq);
%     end
%     % Determination of minimum and minimum + 1se lambda values
%     mean_residuals_sq = mean(residuals_sq);
%     std_residuals_sq = std(residuals_sq);
%     [minmse,minind] = min(mean_residuals_sq);
%     lambdas_min(i) = lambdas(minind);
%     minmse_plus1se = minmse + std_residuals_sq(minind);
%     mean_subtract_abs = abs(mean_residuals_sq - minmse_plus1se);
%     mean_subtract_abs(lambdas < lambdas_min(i)) = Inf;
%     [~,min1seind] = min(mean_subtract_abs);
%     lambdas_1se(i) = lambdas(min1seind);
%     
%     % Bootstrapping for lambda = 0 (OLS), lambda_min, lambda_1se
%     fprintf('Bootstrap-based Coefficient Estimation, %s \n',datsetname)
%     niters = 1000;
%     B_matrix_1se = zeros(size(Xct_norm,2),niters);
%     B_matrix_min = B_matrix_1se;
%     B_matrix_0 = B_matrix_1se;
%     for j = 1:niters
%         traininds = datasample(1:length(Y_end),length(Y_end),'Replace',true);
%         Y_k_train = Y_end(traininds); Xct_k_train = Xct_norm(traininds,:);
%         B_matrix_min(:,j) = ridge(Y_k_train,Xct_k_train,lambdas_min(i),1);
%         B_matrix_1se(:,j) = ridge(Y_k_train,Xct_k_train,lambdas_1se(i),1);
%         B_matrix_0(:,j) = ridge(Y_k_train,Xct_k_train,0,1);
%     end
% 
%     sigthresh = 1; % Defines CI around mean to be +/- sigthresh * std
%     B_mean_min = mean(B_matrix_min,2); B_std_min = std(B_matrix_min,[],2);
%     B_upper_min = B_mean_min + sigthresh*B_std_min; B_lower_min = B_mean_min - sigthresh*B_std_min;
%     sigtypeinds_min{i} = find(sign(B_upper_min) == sign(B_lower_min));
%     B_mins{i} = B_matrix_min;
% 
%     B_mean_1se = mean(B_matrix_1se,2); B_std_1se = std(B_matrix_1se,[],2);
%     B_upper_1se = B_mean_1se + sigthresh*B_std_1se; B_lower_1se = B_mean_1se - sigthresh*B_std_1se;
%     sigtypeinds_1se{i} = find(sign(B_upper_1se) == sign(B_lower_1se));
%     B_1ses{i} = B_matrix_1se;
%     
%     B_mean_0 = mean(B_matrix_0,2); B_std_0 = std(B_matrix_0,[],2);
%     B_upper_0 = B_mean_0 + sigthresh*B_std_0; B_lower_0 = B_mean_0 - sigthresh*B_std_0;
%     sigtypeinds_0{i} = find(sign(B_upper_0) == sign(B_lower_0));
%     B_0s{i} = B_matrix_0;
%     B_mean_0s(i,:) = B_mean_0.';
%     B_means_mat = [B_mean_0,B_mean_min,B_mean_1se];
% 
%     B_med_min = median(B_matrix_min,2); B_std_min = std(B_matrix_min,[],2);
%     B_upper_min = B_med_min + sigthresh*B_std_min; B_lower_min = B_med_min - sigthresh*B_std_min;
%     sigtypeinds_min_med{i} = find(sign(B_upper_min) == sign(B_lower_min));
% %     B_mins{i} = B_matrix_min;
% 
%     B_med_1se = median(B_matrix_1se,2); B_std_1se = std(B_matrix_1se,[],2);
%     B_upper_1se = B_med_1se + sigthresh*B_std_1se; B_lower_1se = B_med_1se - sigthresh*B_std_1se;
%     sigtypeinds_1se_med{i} = find(sign(B_upper_1se) == sign(B_lower_1se));
% %     B_1ses{i} = B_matrix_1se;
%     
%     B_med_0 = median(B_matrix_0,2); B_std_0 = std(B_matrix_0,[],2);
%     B_upper_0 = B_med_0 + sigthresh*B_std_0; B_lower_0 = B_med_0 - sigthresh*B_std_0;
%     sigtypeinds_0_med{i} = find(sign(B_upper_0) == sign(B_lower_0));
% %     B_0s{i} = B_matrix_0;
%     B_meds_mat = [B_med_0,B_med_min,B_med_1se];
% 
% 
%     if plotting
%         figure(f1)
%         subplot(3,4,i); hold on;
%         inds = 1:2:(length(lambdas)-1);
%         errorbar(-log2(lambdas(inds)),mean_residuals_sq(inds),std_residuals_sq(inds),'o'); 
%         plot([-log2(lambdas_min(i)), -log2(lambdas_min(i))],...
%             [min(mean_residuals_sq)-1.1*max(std_residuals_sq),max(mean_residuals_sq)+1.1*max(std_residuals_sq)],...
%             'LineStyle',':','LineWidth',2,'Color','b');
%         plot([-log2(lambdas_1se(i)), -log2(lambdas_1se(i))],...
%             [min(mean_residuals_sq)-1.1*max(std_residuals_sq),max(mean_residuals_sq)+1.1*max(std_residuals_sq)],...
%             'LineStyle',':','LineWidth',2,'Color','g');
%         if i == 1
%             legend({sprintf('%d-fold CV',kfold),'Min MSE', 'Min MSE + 1SE'},'Location','southeast',...
%                 'FontSize',16);
%         end
%         ylim([min(mean_residuals_sq)-1.1*max(std_residuals_sq),max(mean_residuals_sq)+1.1*max(std_residuals_sq)])
%         xlim([-log2(lambdas(end)),-log2(lambdas(1))])
%         xlabel('-log2(\lambda)'); 
%         if i == 1 || i == 5
%             ylabel(sprintf('MSE (%d-fold CV)',kfold)); 
%         end
%         title(datsetlabels{i});
%         set(gca,'FontSize',20,'FontName','Times')
%     end
%     cmap = hsv(length(subclasses));
%     if plotting 
%         figure('Position',[0 0 1000 1500]); 
%         subplot(3,1,1); hold on;
%         b = boxplot(B_matrix_0.',g,'Colors',cmap,'Symbol','');
%         set(b,{'linew'},{1})
%         plot([0,length(classkey)+1],[0,0],'k--','LineWidth',2);
%         set(gca,'XTick',1:length(subclasses));
%         set(gca,'XTickLabel',{})
%         ylim_ = max(abs([max(B_matrix_0(:)),min(B_matrix_0(:))]));
%         set(gca,'YTick',[-ylim_,ylim_])
%         ytickformat('%0.2f')
%         text(-0.45,0,'0','FontSize',16,'FontName','Times')
%         ylim([-1.1*ylim_,1.1*ylim_]);
%         ylabel('Regression Coefficients');
%         xlabel('');
%         set(gca,'TickLength',[0 0])
%         title(['OLS Coefficients, ' datsetlabels{i}],'FontSize',28);
%         set(gca, 'FontSize', 16, 'FontName', 'Times');
%         subplot(3,1,2); hold on;
%         b = boxplot(B_matrix_min.',g,'Colors',cmap,'Symbol','');
%         set(b,{'linew'},{1})
%         plot([0,length(classkey)+1],[0,0],'k--','LineWidth',2);
%         set(gca,'XTick',1:length(subclasses));
%         set(gca,'XTickLabel',{});
%         ylim_ = max(abs([max(B_matrix_min(:)),min(B_matrix_min(:))]));
%         set(gca,'YTick',[-ylim_,ylim_])
%         ytickformat('%0.2f')
%         text(-0.45,0,'0','FontSize',16,'FontName','Times')
%         ylim([-1.1*ylim_,1.1*ylim_]);
%         ylabel('Regression Coefficients');
%         xlabel('');
%         set(gca,'TickLength',[0 0])
%         title(['\lambda_m_i_n Ridge Coefficients, ' datsetlabels{i}],'FontSize',28);
%         set(gca, 'FontSize', 16, 'FontName', 'Times');
%         subplot(3,1,3); hold on;
%         b = boxplot(B_matrix_1se.',g,'Colors',cmap,'Symbol','');
%         set(b,{'linew'},{1})
%         plot([0,length(classkey)+1],[0,0],'k--','LineWidth',2);
%         set(gca,'XTick',1:length(subclasses));
%         set(gca,'XTickLabel',subclasses,'XTickLabelRotation',90);
%         ylim_ = max(abs([max(B_matrix_1se(:)),min(B_matrix_1se(:))]));
%         set(gca,'YTick',[-ylim_,ylim_])
%         text(-0.45,0,'0','FontSize',16,'FontName','Times')
%         ytickformat('%0.2f')
%         ylim([-1.1*ylim_,1.1*ylim_]);
%         ylabel('Regression Coefficients');
%         xlabel('');
%         set(gca,'TickLength',[0 0])
%         title(['\lambda_1_s_e Ridge Coefficients, ' datsetlabels{i}],'FontSize',28);
%         set(gca, 'FontSize', 16, 'FontName', 'Times');
%         if savenclose
%             cd /Users/justintorok/Documents/MATLAB/Nexis_Project/Figures/;
%             print(sprintf('RidgeCoefBar_Yao_%s',datsetname),'-dtiffn','-r300'); close;
% %             print(sprintf('RidgeCoefBar_%s',datsetname),'-dtiffn','-r300'); close;
%             cd /Users/justintorok/Documents/MATLAB/Nexis_Project/Nexis_Project/Nexis/;
%         end
%     end
% end
% if savenclose
%     cd /Users/justintorok/Documents/MATLAB/Nexis_Project/Figures/;
%     print(sprintf('Bootstrap_Lcurves_Yao_%d',kfold),'-dtiffn','-r300'); close;
% %     print(sprintf('Bootstrap_Lcurves_%d',kfold),'-dtiffn','-r300'); close;
%     cd /Users/justintorok/Documents/MATLAB/Nexis_Project/Nexis_Project/Nexis/;
% end
% 
% %% 5. Linear models, top correlations
% numsigtypes = 5;
% % numsigtypes = length(classkey);
% Y_ends = cell(1,length(datsetnames));
% sigtypes_corr_topn = cell(1,length(datsetnames));
% mdls_corr_topn = cell(1,length(datsetnames));
% Y_preds_corr_topn = mdls_corr_topn;
% subclasses_corr_topn = mdls_corr_topn;
% 
% % sigtypes_corr_bic = cell(1,length(datsetnames));
% % mdls_corr_bic = cell(1,length(datsetnames));
% % Y_preds_corr_bic = mdls_corr_bic;
% % subclasses_corr_bic = mdls_corr_bic;
% 
% sigtypes_parcorr_topn = cell(1,length(datsetnames));
% mdls_parcorr_topn = cell(1,length(datsetnames));
% Y_preds_parcorr_topn = mdls_parcorr_topn;
% subclasses_parcorr_topn = mdls_parcorr_topn;
% 
% % sigtypes_parcorr_bic = cell(1,length(datsetnames));
% % mdls_parcorr_bic = cell(1,length(datsetnames));
% % Y_preds_parcorr_bic = mdls_parcorr_bic;
% % subclasses_parcorr_bic = mdls_parcorr_bic;
% 
% sigtypes_coeff_bic = cell(1,length(datsetnames));
% mdls_coeff_bic = cell(1,length(datsetnames));
% Y_preds_coeff_bic = mdls_coeff_bic;
% subclasses_coeff_bic = mdls_coeff_bic;
% 
% plotting = 0;
% savenclose = 0;
% for i = 1:length(datsetnames)
%     % Establish top N types by corr. and partial corr.
%     [~,corrsortinds] = sort(abs(corrmat_all(i,:)),'descend');
%     corrinds_topn = sort(corrsortinds(1:numsigtypes));
%     sigtypes_corr_topn{i} = corrinds_topn;
%     [~,parcorrsortinds] = sort(abs(parcorrmat_all(i,:)),'descend');
%     parcorrinds_topn = sort(parcorrsortinds(1:numsigtypes));
%     sigtypes_parcorr_topn{i} = parcorrinds_topn;
% 
%     % Threshold by coefficient value from bootstrapped OLS, use only
%     % significant values for BIC model selection
%     sigtypeinds_B0_i = sigtypeinds_0{i};
%     subclasses_B0_i = subclasses(sigtypeinds_B0_i);
%     B_mean_0 = mean(B_0s{i},2);
%     B_mean_0_i = B_mean_0(sigtypeinds_B0_i);  
%     [~,coeffsortinds_B0] = sort(abs(B_mean_0_i),'descend');
%     subclasses_B0_i_sort = subclasses_B0_i(coeffsortinds_B0);
%     
%     % Fit models for top N types
%     datsetname = datsetnames{i};
%     Y = outputs_R2studies.(datsetname).data;
%     naninds = isnan(Y(:,1));
%     Y_end = Y(~naninds,end);
%     Y_ends{i} = Y_end;
% %     Xct = Tasic_ng606(~naninds,:);
%     Xct = Yao_nG1300(~naninds,:);
%     Xct_sums = repmat(max(Xct),size(Xct,1),1);
%     Xct_norm = Xct./Xct_sums;
%     Xct_norm_corr_topn = Xct_norm(:,corrinds_topn);
%     mdls_corr_topn{i} = fitlm(Xct_norm_corr_topn,Y_end);
%     Y_preds_corr_topn{i} = [ones(length(Y_end),1), Xct_norm_corr_topn]...
%         * mdls_corr_topn{i}.Coefficients.Estimate;
%     subclasses_corr_topn{i} = subclasses(corrinds_topn);
%     Xct_norm_parcorr_topn = Xct_norm(:,parcorrinds_topn);
%     mdls_parcorr_topn{i} = fitlm(Xct_norm_parcorr_topn,Y_end);
%     Y_preds_parcorr_topn{i} = [ones(length(Y_end),1), Xct_norm_parcorr_topn]...
%         * mdls_parcorr_topn{i}.Coefficients.Estimate;
%     subclasses_parcorr_topn{i} = subclasses(parcorrinds_topn);
%     
%     % Fit models based on BIC
%     bic_calc = @(x,y,z) -2*x + (y * log(z));
%     bics_coeff = zeros(1,length(sigtypeinds_B0_i));
% %     bics_parcorr = zeros(1,size(corrmat_all,2));
%     for j = 1:length(sigtypeinds_B0_i)
%         subclasses_ij = subclasses_B0_i_sort(1:j); 
%         Xct_norm_coeff_j = Xct_norm(:,ismember(subclasses,subclasses_ij));
%         mdls_coeff_j = fitlm(Xct_norm_coeff_j,Y_end);
%         bics_coeff(j) = bic_calc(mdls_coeff_j.LogLikelihood,(j+1),length(Y_end));
% %         parcorrinds_j = sort(parcorrsortinds(1:j));
% %         Xct_norm_parcorr_j = Xct_norm(:,parcorrinds_j);
% %         mdls_parcorr_j = fitlm(Xct_norm_parcorr_j,Y_end);
% %         bics_parcorr(j) = bic_calc(mdls_parcorr_j.LogLikelihood,(j+1),length(Y_end));
%     end
%     if plotting
%         figure; scatter(1:length(sigtypeinds_B0_i),bics_coeff); title(datsetname); xlabel('n'); ylabel('BIC');
%     end
%     [~, modelind_coeff] = min(bics_coeff);
%     subclasses_coeff_bic{i} = sort(subclasses_B0_i_sort(1:modelind_coeff));
%     sigtypes_coeff_bic{i} = find(ismember(subclasses,subclasses_coeff_bic{i}));
%     Xct_norm_coeff_bic = Xct_norm(:,sigtypes_coeff_bic{i});
%     mdls_coeff_bic{i} = fitlm(Xct_norm_coeff_bic,Y_end);
%     Y_preds_coeff_bic{i} = [ones(length(Y_end),1), Xct_norm_coeff_bic]...
%         * mdls_coeff_bic{i}.Coefficients.Estimate;
% 
% 
% %     [~, modelind_parcorr] = min(bics_parcorr);
% %     parcorrinds_bic = sort(parcorrsortinds(1:modelind_parcorr));
% %     sigtypes_parcorr_bic{i} = parcorrinds_bic;
% %     Xct_norm_parcorr_bic = Xct_norm(:,parcorrinds_bic);
% %     mdls_parcorr_bic{i} = fitlm(Xct_norm_parcorr_bic,Y_end);
% %     Y_preds_parcorr_bic{i} = [ones(length(Y_end),1), Xct_norm_parcorr_bic]...
% %         * mdls_parcorr_bic{i}.Coefficients.Estimate;
% %     subclasses_parcorr_bic{i} = subclasses(parcorrinds_bic);
% end
% 
% if plotting
%     % Corr, top N
%     f = figure('Name','CorrTopN','units','inch','position',[0 0 15 11]);
%     cmap = hsv(length(datsetnames));
%     for i = 1:length(datsetnames)
%         subplot(3,4,i); % fix later for not 8 datasets
%         scatter(Y_preds_corr_topn{i},Y_ends{i},30,cmap(i,:),shapes{i});
%         h = lsline; set(h,'LineWidth',2,'Color','k','LineStyle','--');
%         max_x = max(Y_preds_corr_topn{i}); max_y = max(Y_ends{i});
%         min_x = min(Y_preds_corr_topn{i}); min_y = min(Y_ends{i});
%         xlim([min_x max_x]); ylim([min_y max_y*1.05]);
%         xticks([min_x (max_x+min_x)/2 max_x]); yticks([min_y (max_y+min_y)/2 max_y]);
%         if round(min_x,2) ~= 0 
%             xticklabels({num2str(min_x,'%.2f'),num2str((max_x+min_x)/2,'%.2f'),...
%                 num2str(max_x,'%.2f')});
%         else
%             xticklabels({'0',num2str((max_x+min_x)/2,'%.2f'),...
%                 num2str(max_x,'%.2f')});
%         end
%         if strcmp(datsetnames{i},'Clavaguera')
%             yticklabels({num2str(min_y,'%.3f'),num2str((max_y+min_y)/2,'%.2f'),...
%                     num2str(max_y,'%.2f')});
%         else
%             if round(min_y,2) ~= 0 
%                 yticklabels({num2str(min_y,'%.2f'),num2str((max_y+min_y)/2,'%.2f'),...
%                     num2str(max_y,'%.2f')});
%             else
%                 yticklabels({'0',num2str((max_y+min_y)/2,'%.2f'),...
%                     num2str(max_y,'%.2f')});
%             end
%         end
%         % ax = gca; ax.YAxis.Exponent = -1; ax.XAxis.Exponent = -1;
%         text(0.05*(max_x-min_x)+min_x, 0.925*(max_y-min_y)+min_y, sprintf('R^2 = %.2f',mdls_corr_topn{i}.Rsquared.Adjusted),...
%             'FontName','Times','FontSize',16);
%         title(datsetlabels{i},'FontSize',20);
%         set(gca,'FontSize',16,'FontName','Times');
%     end
%     han=axes(f,'visible','off'); 
%     han.XLabel.Visible='on';
%     han.YLabel.Visible='on';
%     ylh = ylabel(han,'Observed Pathology at End Time Point','FontSize',20,...
%         'FontName','Times','FontWeight','bold');
%     ylh.Position(1) = ylh.Position(1) - abs(ylh.Position(1) * 0.75);
%     xlh = xlabel(han,'Predicted Pathology at End Time Point','FontSize',20,...
%         'FontName','Times','FontWeight','bold');
%     xlh.Position(2) = xlh.Position(2) - abs(xlh.Position(2) * 0.5);
%     if savenclose
%         cd /Users/justintorok/Documents/MATLAB/Nexis_Project/Figures/;
%         print(sprintf('LinearModelPlots_Yao_Corrs_Top%dTypes',numsigtypes),'-dtiffn','-r300'); close;
% %         print(sprintf('LinearModelPlots_Corrs_Top%dTypes',numsigtypes),'-dtiffn','-r300'); close;
%         cd /Users/justintorok/Documents/MATLAB/Nexis_Project/Nexis/;
%     end
% %     % Partial corr, top N
% %     f = figure('Name','ParCorrTopN','units','inch','position',[0 0 15 7]);
% %     cmap = hsv(length(datsetnames));
% %     for i = 1:length(datsetnames)
% %         subplot(2,4,i); % fix later for not 8 datasets
% %         scatter(Y_preds_parcorr_topn{i},Y_ends{i},50,cmap(i,:),shapes{i},'filled');
% %         h = lsline; set(h,'LineWidth',2,'Color','k','LineStyle','--');
% %         max_x = max(Y_preds_parcorr_topn{i}); max_y = max(Y_ends{i});
% %         min_x = min(Y_preds_parcorr_topn{i}); min_y = min(Y_ends{i});
% %         xlim([min_x max_x]); ylim([min_y max_y*1.05]);
% %         xticks([min_x (max_x+min_x)/2 max_x]); yticks([min_y (max_y+min_y)/2 max_y]);
% %         if round(min_x,2) ~= 0 
% %             xticklabels({num2str(min_x,'%.2f'),num2str((max_x+min_x)/2,'%.2f'),...
% %                 num2str(max_x,'%.2f')});
% %         else
% %             xticklabels({'0',num2str((max_x+min_x)/2,'%.2f'),...
% %                 num2str(max_x,'%.2f')});
% %         end
% %         if strcmp(datsetnames{i},'Clavaguera')
% %             yticklabels({num2str(min_y,'%.3f'),num2str((max_y+min_y)/2,'%.2f'),...
% %                     num2str(max_y,'%.2f')});
% %         else
% %             if round(min_y,2) ~= 0 
% %                 yticklabels({num2str(min_y,'%.2f'),num2str((max_y+min_y)/2,'%.2f'),...
% %                     num2str(max_y,'%.2f')});
% %             else
% %                 yticklabels({'0',num2str((max_y+min_y)/2,'%.2f'),...
% %                     num2str(max_y,'%.2f')});
% %             end
% %         end
% %         % ax = gca; ax.YAxis.Exponent = -1; ax.XAxis.Exponent = -1;
% %         text(0.05*(max_x-min_x)+min_x, 0.925*(max_y-min_y)+min_y, sprintf('R^2 = %.2f',mdls_parcorr_topn{i}.Rsquared.Adjusted),...
% %             'FontName','Times','FontSize',16);
% %         title(datsetlabels{i},'FontSize',20);
% %         set(gca,'FontSize',16,'FontName','Times');
% %     end
% %     han=axes(f,'visible','off'); 
% %     han.XLabel.Visible='on';
% %     han.YLabel.Visible='on';
% %     ylh = ylabel(han,'Observed Pathology at End Time Point','FontSize',20,...
% %         'FontName','Times','FontWeight','bold');
% %     ylh.Position(1) = ylh.Position(1) - abs(ylh.Position(1) * 0.75);
% %     xlh = xlabel(han,'Predicted Pathology at End Time Point','FontSize',20,...
% %         'FontName','Times','FontWeight','bold');
% %     xlh.Position(2) = xlh.Position(2) - abs(xlh.Position(2) * 0.5);
% %     if savenclose
% %         cd /Users/justintorok/Documents/MATLAB/Nexis_Project/Figures/;
% %         print(sprintf('LinearModelPlots_ParCorrs_Top%dTypes',numsigtypes),'-dtiffn','-r300'); close;
% %         cd /Users/justintorok/Documents/MATLAB/Nexis_Project/Nexis/;
% %     end
% % 
%     % Corr, BIC
%     f = figure('Name','CorrBIC','units','inch','position',[0 0 15 7]);
%     cmap = hsv(length(datsetnames));
%     for i = 1:length(datsetnames)
%         subplot(3,4,i+1); % fix later for not 8 datasets
%         scatter(Y_preds_coeff_bic{i},Y_ends{i},50,cmap(i,:),shapes{i},'filled');
%         h = lsline; set(h,'LineWidth',2,'Color','k','LineStyle','--');
%         max_x = max(Y_preds_coeff_bic{i}); max_y = max(Y_ends{i});
%         min_x = min(Y_preds_coeff_bic{i}); min_y = min(Y_ends{i});
%         xlim([min_x max_x]); ylim([min_y max_y*1.05]);
%         xticks([min_x (max_x+min_x)/2 max_x]); yticks([min_y (max_y+min_y)/2 max_y]);
%         if round(min_x,2) ~= 0 
%             xticklabels({num2str(min_x,'%.2f'),num2str((max_x+min_x)/2,'%.2f'),...
%                 num2str(max_x,'%.2f')});
%         else
%             xticklabels({'0',num2str((max_x+min_x)/2,'%.2f'),...
%                 num2str(max_x,'%.2f')});
%         end
%         if strcmp(datsetnames{i},'Clavaguera')
%             yticklabels({num2str(min_y,'%.3f'),num2str((max_y+min_y)/2,'%.2f'),...
%                     num2str(max_y,'%.2f')});
%         else
%             if round(min_y,2) ~= 0 
%                 yticklabels({num2str(min_y,'%.2f'),num2str((max_y+min_y)/2,'%.2f'),...
%                     num2str(max_y,'%.2f')});
%             else
%                 yticklabels({'0',num2str((max_y+min_y)/2,'%.2f'),...
%                     num2str(max_y,'%.2f')});
%             end
%         end
%         % ax = gca; ax.YAxis.Exponent = -1; ax.XAxis.Exponent = -1;
%         text(0.05*(max_x-min_x)+min_x, 0.925*(max_y-min_y)+min_y, sprintf('R^2 = %.2f',mdls_coeff_bic{i}.Rsquared.Adjusted),...
%             'FontName','Times','FontSize',16);
%         title(datsetlabels{i},'FontSize',20);
%         set(gca,'FontSize',16,'FontName','Times');
%     end
%     han=axes(f,'visible','off'); 
%     han.XLabel.Visible='on';
%     han.YLabel.Visible='on';
%     ylh = ylabel(han,'Observed Pathology at End Time Point','FontSize',20,...
%         'FontName','Times','FontWeight','bold');
%     ylh.Position(1) = ylh.Position(1) - abs(ylh.Position(1) * 0.75);
%     xlh = xlabel(han,'Predicted Pathology at End Time Point','FontSize',20,...
%         'FontName','Times','FontWeight','bold');
%     xlh.Position(2) = xlh.Position(2) - abs(xlh.Position(2) * 0.5);
%     if savenclose
%         cd /Users/justintorok/Documents/MATLAB/Nexis_Project/Figures/;
%         print('LinearModelPlots_Coeffs_BIC','-dtiffn','-r300'); close;
%         cd /Users/justintorok/Documents/MATLAB/Nexis_Project/Nexis/;
%     end
% % 
% %     % Partial Corr, BIC
% %     f = figure('Name','ParCorrBIC','units','inch','position',[0 0 15 7]);
% %     cmap = hsv(length(datsetnames));
% %     for i = 1:length(datsetnames)
% %         subplot(2,4,i); % fix later for not 8 datasets
% %         scatter(Y_preds_parcorr_bic{i},Y_ends{i},50,cmap(i,:),shapes{i},'filled');
% %         h = lsline; set(h,'LineWidth',2,'Color','k','LineStyle','--');
% %         max_x = max(Y_preds_parcorr_bic{i}); max_y = max(Y_ends{i});
% %         min_x = min(Y_preds_parcorr_bic{i}); min_y = min(Y_ends{i});
% %         xlim([min_x max_x]); ylim([min_y max_y*1.05]);
% %         xticks([min_x (max_x+min_x)/2 max_x]); yticks([min_y (max_y+min_y)/2 max_y]);
% %         if round(min_x,2) ~= 0 
% %             xticklabels({num2str(min_x,'%.2f'),num2str((max_x+min_x)/2,'%.2f'),...
% %                 num2str(max_x,'%.2f')});
% %         else
% %             xticklabels({'0',num2str((max_x+min_x)/2,'%.2f'),...
% %                 num2str(max_x,'%.2f')});
% %         end
% %         if strcmp(datsetnames{i},'Clavaguera')
% %             yticklabels({num2str(min_y,'%.3f'),num2str((max_y+min_y)/2,'%.2f'),...
% %                     num2str(max_y,'%.2f')});
% %         else
% %             if round(min_y,2) ~= 0 
% %                 yticklabels({num2str(min_y,'%.2f'),num2str((max_y+min_y)/2,'%.2f'),...
% %                     num2str(max_y,'%.2f')});
% %             else
% %                 yticklabels({'0',num2str((max_y+min_y)/2,'%.2f'),...
% %                     num2str(max_y,'%.2f')});
% %             end
% %         end
% %         % ax = gca; ax.YAxis.Exponent = -1; ax.XAxis.Exponent = -1;
% %         text(0.05*(max_x-min_x)+min_x, 0.925*(max_y-min_y)+min_y, sprintf('R^2 = %.2f',mdls_parcorr_bic{i}.Rsquared.Adjusted),...
% %             'FontName','Times','FontSize',16);
% %         title(datsetlabels{i},'FontSize',20);
% %         set(gca,'FontSize',16,'FontName','Times');
% %     end
% %     han=axes(f,'visible','off'); 
% %     han.XLabel.Visible='on';
% %     han.YLabel.Visible='on';
% %     ylh = ylabel(han,'Observed Pathology at End Time Point','FontSize',20,...
% %         'FontName','Times','FontWeight','bold');
% %     ylh.Position(1) = ylh.Position(1) - abs(ylh.Position(1) * 0.75);
% %     xlh = xlabel(han,'Predicted Pathology at End Time Point','FontSize',20,...
% %         'FontName','Times','FontWeight','bold');
% %     xlh.Position(2) = xlh.Position(2) - abs(xlh.Position(2) * 0.5);
% %     if savenclose
% %         cd /Users/justintorok/Documents/MATLAB/Nexis_Project/Figures/;
% %         print('LinearModelPlots_ParCorrs_BIC','-dtiffn','-r300'); close;
% %         cd /Users/justintorok/Documents/MATLAB/Nexis_Project/Nexis/;
% %     end    
% end
% 
% %% 5. Brainframe images
% addpath('/Users/justintorok/Documents/MATLAB/Brainframe-Dev/Brainframe')
% types_bf = {'Lamp5','L2_3_IT','Oligo'};
% datasets_bf = {'IbaHippInj','Hurtado','DS9'};
% 
% nsig = cell(42,2);
% nsig(:,1) = subclasses.';
% for i = 1:length(subclasses)
%     nsig{i,2} = 0;
% end
% 
% for i = 1:length(subclasses_corr)
%     inds = find(ismember(subclasses,subclasses_corr{i}));
%     for j = 1:length(inds)
%         nsig{inds(j),2} = nsig{inds(j),2} + 1/length(subclasses_corr);
%     end
% end
% nsigvec = cell2mat(nsig(:,2));
% [~,sort_inds] = sort(nsigvec,'descend');
% nsig = nsig(sort_inds,:);
% 
% nsigcorr = cell(42,2);
% nsigcorr(:,1) = subclasses.';
% for i = 1:length(subclasses)
%     nsigcorr{i,2} = 0;
% end
% 
% for i = 1:length(subclasses_corr_topn)
%     inds = find(ismember(subclasses,subclasses_corr_topn{i}));
%     for j = 1:length(inds)
%         nsigcorr{inds(j),2} = nsigcorr{inds(j),2} + 1/length(subclasses_corr_topn);
%     end
% end
% nsigvec = cell2mat(nsigcorr(:,2));
% [~,sort_inds] = sort(nsigvec,'descend');
% nsigcorr = nsigcorr(sort_inds,:);
% 
% 
% 
% % 
% % %% 5. Linear models for significant cell types
% % sigtypeinds_parcorr = sigtypes_partialp001;
% % mdls_parcorr_topn = cell(1,length(datsetnames));
% % Y_preds_parcorr_topn = mdls_parcorr_topn;
% % subclasses_parcorr_topn = mdls_parcorr_topn;
% % sigtypeinds_bootstrap = sigtypeinds_min; % OLS - can change, but OLS is sparsest and justifiable
% % mdls_bootstrap = cell(1,length(datsetnames));
% % Y_preds_bootstrap = mdls_bootstrap;
% % subclasses_bootstrap = mdls_bootstrap;
% % Y_ends = cell(1,length(datsetnames));
% % 
% % plotting = 1;
% % savenclose = 0;
% % for i = 1:length(datsetnames)
% %     datsetname = datsetnames{i};
% %     Y = outputs_R2studies.(datsetname).data;
% %     naninds = isnan(Y(:,1));
% %     Y_end = Y(~naninds,end);
% %     Xct = Tasic_ng606(~naninds,:);
% %     Xct_sums = repmat(max(Xct),size(Xct,1),1);
% %     Xct_norm = Xct./Xct_sums;
% %     Xct_norm_parcorr_topn = Xct_norm(:,sigtypeinds_parcorr{i});
% %     mdls_parcorr_topn{i} = fitlm(Xct_norm_parcorr_topn,Y_end);
% %     Y_preds_parcorr_topn{i} = [ones(length(Y_end),1), Xct_norm_parcorr_topn]...
% %         * mdls_parcorr_topn{i}.Coefficients.Estimate;
% %     subclasses_parcorr_topn{i} = subclasses(sigtypeinds_parcorr{i});
% %     Xct_norm_bootstrap = Xct_norm(:,sigtypeinds_bootstrap{i});
% %     mdls_bootstrap{i} = fitlm(Xct_norm_bootstrap,Y_end);
% %     Y_preds_bootstrap{i} = [ones(length(Y_end),1), Xct_norm_bootstrap]...
% %         * mdls_bootstrap{i}.Coefficients.Estimate;
% %     subclasses_bootstrap{i} = subclasses(sigtypeinds_bootstrap{i});
% %     Y_ends{i} = Y_end;
% % end
% % 
% % if plotting
% %     f = figure('units','inch','position',[0 0 15 7]);
% %     cmap = hsv(length(datsetnames));
% %     for i = 1:length(datsetnames)
% %         subplot(2,4,i); % fix later for not 8 datasets
% %         scatter(Y_preds_parcorr_topn{i},Y_ends{i},50,cmap(i,:),shapes{i},'filled');
% %         h = lsline; set(h,'LineWidth',2,'Color','k','LineStyle','--');
% %         max_x = max(Y_preds_parcorr_topn{i}); max_y = max(Y_ends{i});
% %         min_x = min(Y_preds_parcorr_topn{i}); min_y = min(Y_ends{i});
% %         xlim([min_x max_x]); ylim([min_y max_y*1.05]);
% %         xticks([min_x (max_x+min_x)/2 max_x]); yticks([min_y (max_y+min_y)/2 max_y]);
% %         if round(min_x,2) ~= 0 
% %             xticklabels({num2str(min_x,'%.2f'),num2str((max_x+min_x)/2,'%.2f'),...
% %                 num2str(max_x,'%.2f')});
% %         else
% %             xticklabels({'0',num2str((max_x+min_x)/2,'%.2f'),...
% %                 num2str(max_x,'%.2f')});
% %         end
% %         if strcmp(datsetnames{i},'Clavaguera')
% %             yticklabels({num2str(min_y,'%.3f'),num2str((max_y+min_y)/2,'%.2f'),...
% %                     num2str(max_y,'%.2f')});
% %         else
% %             if round(min_y,2) ~= 0 
% %                 yticklabels({num2str(min_y,'%.2f'),num2str((max_y+min_y)/2,'%.2f'),...
% %                     num2str(max_y,'%.2f')});
% %             else
% %                 yticklabels({'0',num2str((max_y+min_y)/2,'%.2f'),...
% %                     num2str(max_y,'%.2f')});
% %             end
% %         end
% %         % ax = gca; ax.YAxis.Exponent = -1; ax.XAxis.Exponent = -1;
% %         text(0.05*(max_x-min_x)+min_x, 0.925*(max_y-min_y)+min_y, sprintf('R^2 = %.2f',mdls_parcorr_topn{i}.Rsquared.Adjusted),...
% %             'FontName','Times','FontSize',16);
% %         title(datsetlabels{i},'FontSize',20);
% %         set(gca,'FontSize',16,'FontName','Times');
% %     end
% %     han=axes(f,'visible','off'); 
% %     han.XLabel.Visible='on';
% %     han.YLabel.Visible='on';
% %     ylh = ylabel(han,'Observed Pathology at End Time Point','FontSize',20,...
% %         'FontName','Times','FontWeight','bold');
% %     ylh.Position(1) = ylh.Position(1) - abs(ylh.Position(1) * 0.75);
% %     xlh = xlabel(han,'Predicted Pathology at End Time Point','FontSize',20,...
% %         'FontName','Times','FontWeight','bold');
% %     xlh.Position(2) = xlh.Position(2) - abs(xlh.Position(2) * 0.5);
% %     if savenclose
% %         cd /Users/justintorok/Documents/MATLAB/Nexis_Project/Figures/;
% %         print('LinearModelPlots_PartialCorrs','-dtiffn','-r300'); close;
% %         cd /Users/justintorok/Documents/MATLAB/Nexis_Project/Nexis/;
% %     end
% %     
% %     f = figure('units','inch','position',[0 0 15 7]);
% %     cmap = hsv(length(datsetnames));
% %     for i = 1:length(datsetnames)
% %         subplot(2,4,i); % fix later for not 8 datasets
% %         scatter(Y_preds_bootstrap{i},Y_ends{i},50,cmap(i,:),shapes{i},'filled');
% %         h = lsline; set(h,'LineWidth',2,'Color','k','LineStyle','--');
% %         max_x = max(Y_preds_bootstrap{i}); max_y = max(Y_ends{i});
% %         min_x = min(Y_preds_bootstrap{i}); min_y = min(Y_ends{i});
% %         xlim([min_x max_x]); ylim([min_y max_y*1.05]);
% %         xticks([min_x (max_x+min_x)/2 max_x]); yticks([min_y (max_y+min_y)/2 max_y]);
% %         if round(min_x,2) ~= 0 
% %             xticklabels({num2str(min_x,'%.2f'),num2str((max_x+min_x)/2,'%.2f'),...
% %                 num2str(max_x,'%.2f')});
% %         else
% %             xticklabels({'0',num2str((max_x+min_x)/2,'%.2f'),...
% %                 num2str(max_x,'%.2f')});
% %         end
% %         if strcmp(datsetnames{i},'Clavaguera')
% %             yticklabels({num2str(min_y,'%.3f'),num2str((max_y+min_y)/2,'%.2f'),...
% %                     num2str(max_y,'%.2f')});
% %         else
% %             if round(min_y,2) ~= 0 
% %                 yticklabels({num2str(min_y,'%.2f'),num2str((max_y+min_y)/2,'%.2f'),...
% %                     num2str(max_y,'%.2f')});
% %             else
% %                 yticklabels({'0',num2str((max_y+min_y)/2,'%.2f'),...
% %                     num2str(max_y,'%.2f')});
% %             end
% %         end
% %         % ax = gca; ax.YAxis.Exponent = -1; ax.XAxis.Exponent = -1;
% %         text(0.05*(max_x-min_x)+min_x, 0.925*(max_y-min_y)+min_y, sprintf('R^2 = %.2f',mdls_bootstrap{i}.Rsquared.Adjusted),...
% %             'FontName','Times','FontSize',16);
% %         title(datsetlabels{i},'FontSize',20);
% %         set(gca,'FontSize',16,'FontName','Times');
% %     end
% %     han=axes(f,'visible','off'); 
% %     han.XLabel.Visible='on';
% %     han.YLabel.Visible='on';
% %     ylh = ylabel(han,'Observed Pathology at End Time Point','FontSize',20,...
% %         'FontName','Times','FontWeight','bold');
% %     ylh.Position(1) = ylh.Position(1) - abs(ylh.Position(1) * 0.75);
% %     xlh = xlabel(han,'Predicted Pathology at End Time Point','FontSize',20,...
% %         'FontName','Times','FontWeight','bold');
% %     xlh.Position(2) = xlh.Position(2) - abs(xlh.Position(2) * 0.5);
% %     if savenclose
% %         cd /Users/justintorok/Documents/MATLAB/Nexis_Project/Figures/;
% %         print('LinearModelPlots_BootstrapOLS','-dtiffn','-r300'); close;
% %         cd /Users/justintorok/Documents/MATLAB/Nexis_Project/Nexis/;
% %     end
% % end
% % 
% % % %% 
% % % Y = outputs_R2studies.Hurtado.data;
% % % naninds = isnan(Y(:,1));
% % % Y_end = Y(~naninds,end);
% % % Xct = Tasic_ng606(~naninds,:);
% % % mdl = mvregress(Xct,Y_end);
% % % 
% % % ranksmat = zeros(length(datsetnames),length(subclasses));
% % % for i = 1:length(datsetnames)
% % %     sortinds = sortindsmat(i,:);
% % %     for j = 1:length(subclasses)
% % %         ranksmat(i,j) = find(sortinds == j);
% % %     end
% % % end
% % % ranksmat_mean = mean(ranksmat);
% % % [~,ctranks] = sort(ranksmat_mean);
% % % ranksmat_rankorder = ranksmat(:,ctranks);
% % % subclasses_rankorder = subclasses(ctranks);
% % % 
% % % plotting = 'false';
% % % if logical(plotting)
% % %     figure('units','inch','position',[0 0 5 9]); 
% % %     cmap = flipud(pink(25));
% % %     xs = [1 length(datsetnames)]; ys = [1 length(subclasses)];
% % %     imagesc(xs,ys,ranksmat_rankorder.'); 
% % %     h = colorbar; set(h,'YDir','reverse');
% % %     colormap(cmap);
% % %     set(gca,'ytick',1:length(subclasses));
% % %     figlabs = subclasses_rankorder;
% % %     set(gca,'YTickLabel',figlabs);
% % %     set(gca,'xtick',1:length(datsetnames));
% % %     set(gca,'TickLength',[0 0]);
% % %     set(gca,'XAxisLocation','top');
% % %     set(gca,'XTickLabelRotation',45);
% % %     datsetlabels = cellfun(@(x) strrep(x,'_',' '), datsetnames,'UniformOutput',0);
% % %     set(gca,'XTickLabel',datsetlabels);
% % % %     ylabel('Cell Types','FontSize',20);
% % %     set(gca,'FontSize',16,'FontName','Times');
% % % end
% % % print('LASSORankings','-dpng','-r300'); close;
% % % 
% % % %% Linear models for top three cell types for each study (LASSO)
% % % mdls = cell(1,length(datsetnames));
% % % Y_ends = mdls;
% % % Y_preds = mdls;
% % % subclasses_top3 = mdls;
% % % for i = 1:length(datsetnames)
% % %     datsetname = datsetnames{i};
% % %     B = Bs{i}; FitInfo = FitInfos{i};
% % %     ind_top3 = find(FitInfo.DF==3,1,'last');
% % %     lambda = FitInfo.Lambda(ind_top3);
% % %     ct_top3 = top3_types{i};
% % %     ctinds_top3 = zeros(1,length(ct_top3));
% % %     for j = 1:length(ctinds_top3)
% % %         ctinds_top3(j) = find(ismember(classkey,ct_top3{j}));
% % %     end
% % %     subclasses_top3{i} = subclasses(ctinds_top3);
% % %     Y = outputs_R2studies.(datsetname).data;
% % %     naninds = isnan(Y(:,1));
% % %     Y_end = Y(~naninds,end);
% % %     Xct = Tasic_ng606(~naninds,:);
% % %     Xct_sums = repmat(max(Xct),size(Xct,1),1);
% % %     Xct_norm = Xct./Xct_sums;
% % %     Xct_norm_top3 = Xct_norm(:,ctinds_top3);
% % %     mdls{i} = fitlm(Xct_norm_top3,Y_end);
% % %     Y_preds{i} = [ones(length(Y_end),1), Xct_norm_top3] * mdls{i}.Coefficients.Estimate;
% % %     Y_ends{i} = Y_end;
% % % end
% % % plotting = 'false';
% % % if logical(plotting)
% % %     f = figure('units','inch','position',[0 0 15 7]);
% % %     cmap = hsv(length(datsetnames));
% % %     datsetlabels = cellfun(@(x) strrep(x,'_',' '), datsetnames,'UniformOutput',0);
% % %     for i = 1:length(datsetnames)
% % %         subplot(2,4,i); % fix later for not 8 datasets
% % %         scatter(Y_preds{i},Y_ends{i},50,cmap(i,:),shapes{i},'filled');
% % %         h = lsline; set(h,'LineWidth',2,'Color','k','LineStyle','--');
% % %         max_x = max(Y_preds{i}); max_y = max(Y_ends{i});
% % %         min_x = min(Y_preds{i}); min_y = min(Y_ends{i});
% % %         xlim([min_x max_x]); ylim([min_y max_y*1.05]);
% % %         xticks([min_x (max_x+min_x)/2 max_x]); yticks([min_y (max_y+min_y)/2 max_y]);
% % %         % xtickformat('%.1d'); ytickformat('%.1d'); 
% % %         if round(min_x,2) ~= 0 
% % %             xticklabels({num2str(min_x,'%.2f'),num2str((max_x+min_x)/2,'%.2f'),...
% % %                 num2str(max_x,'%.2f')});
% % %         else
% % %             xticklabels({'0',num2str((max_x+min_x)/2,'%.2f'),...
% % %                 num2str(max_x,'%.2f')});
% % %         end
% % %         if strcmp(datsetnames{i},'Clavaguera')
% % %             yticklabels({num2str(min_y,'%.3f'),num2str((max_y+min_y)/2,'%.2f'),...
% % %                     num2str(max_y,'%.2f')});
% % %         else
% % %             if round(min_y,2) ~= 0 
% % %                 yticklabels({num2str(min_y,'%.2f'),num2str((max_y+min_y)/2,'%.2f'),...
% % %                     num2str(max_y,'%.2f')});
% % %             else
% % %                 yticklabels({'0',num2str((max_y+min_y)/2,'%.2f'),...
% % %                     num2str(max_y,'%.2f')});
% % %             end
% % %         end
% % %         % ax = gca; ax.YAxis.Exponent = -1; ax.XAxis.Exponent = -1;
% % %         subs_top3 = subclasses_top3{i};
% % %         text(0.05*(max_x-min_x)+min_x, 0.925*(max_y-min_y)+min_y, sprintf('R^2 = %.2f',mdls{i}.Rsquared.Adjusted),...
% % %             'FontName','Times','FontSize',16);
% % %         title(datsetlabels{i},'FontSize',20);
% % %         set(gca,'FontSize',16,'FontName','Times');
% % %     end
% % %     han=axes(f,'visible','off'); 
% % %     han.XLabel.Visible='on';
% % %     han.YLabel.Visible='on';
% % %     ylh = ylabel(han,'Observed Pathology at End Time Point','FontSize',20,...
% % %         'FontName','Times','FontWeight','bold');
% % %     ylh.Position(1) = ylh.Position(1) - abs(ylh.Position(1) * 0.75);
% % %     xlh = xlabel(han,'Predicted Pathology at End Time Point','FontSize',20,...
% % %         'FontName','Times','FontWeight','bold');
% % %     xlh.Position(2) = xlh.Position(2) - abs(xlh.Position(2) * 0.5);
% % %     print('Top3Scatters_ByLasso','-dpng','-r300'); close;
% % % end
% % % 
% % % %% Stepwise regression w.r.t. t(end) tau pathology 
% % % 
% % % % mdls_stepwise = cell(1,length(datsetnames));
% % % % top_celltypes_stepwise = mdls_stepwise;
% % % % sortindsmat = zeros(length(datsetnames),length(classkey));
% % % % for i = 1:length(datsetnames)
% % % %     datsetname = datsetnames{i};
% % % %     Y = outputs_R2studies.(datsetname).data;
% % % %     naninds = isnan(Y(:,1));
% % % %     Y_end = Y(~naninds,end);
% % % %     Xct = Tasic_ng606(~naninds,:);
% % % %     Xct_sums = repmat(max(Xct),size(Xct,1),1);
% % % %     Xct_norm = Xct./Xct_sums;
% % % %     mdls_stepwise{i} = stepwiselm(Xct_norm,Y_end,'constant','Upper','linear','VarNames',...
% % % %         [subclasses 'Y_end'],'PEnter',0.01/length(subclasses),...
% % % %         'PRemove',0.05/length(subclasses));
% % % %     nonzeroinds = zeros(1,size(Xct,2));
% % % % end
% % % 
% % % %% Linear models for top three cell types for each study (Correlations)
% % % mdls = cell(1,length(datsetnames));
% % % Y_ends = mdls;
% % % Y_preds = mdls;
% % % subclasses_top3_corrs = mdls;
% % % for i = 1:length(datsetnames)
% % %     datsetname = datsetnames{i};
% % %     corrs_i = corrmat_all(i,:);
% % %     [~, inds_i] = sort(corrs_i,'descend');
% % %     subclasses_top3_corrs{i} = subclasses(inds_i(1:3));
% % %     Y = outputs_R2studies.(datsetname).data;
% % %     naninds = isnan(Y(:,1));
% % %     Y_end = Y(~naninds,end);
% % %     Xct = Tasic_ng606(~naninds,:);
% % %     Xct_sums = repmat(max(Xct),size(Xct,1),1);
% % %     Xct_norm = Xct./Xct_sums;
% % %     Xct_norm_top3 = Xct_norm(:,inds_i(1:3));
% % %     mdls{i} = fitlm(Xct_norm_top3,Y_end);
% % %     Y_preds{i} = [ones(length(Y_end),1), Xct_norm_top3] * mdls{i}.Coefficients.Estimate;
% % %     Y_ends{i} = Y_end;
% % % end
% % % 
% % % if logical(plotting)
% % %     f = figure('units','inch','position',[0 0 15 7]);
% % %     cmap = hsv(length(datsetnames));
% % %     datsetlabels = cellfun(@(x) strrep(x,'_',' '), datsetnames,'UniformOutput',0);
% % %     for i = 1:length(datsetnames)
% % %         subplot(2,4,i); % fix later for not 8 datasets
% % %         scatter(Y_preds{i},Y_ends{i},50,cmap(i,:),shapes{i},'filled');
% % %         h = lsline; set(h,'LineWidth',2,'Color','k','LineStyle','--');
% % %         max_x = max(Y_preds{i}); max_y = max(Y_ends{i});
% % %         min_x = min(Y_preds{i}); min_y = min(Y_ends{i});
% % %         xlim([min_x max_x]); ylim([min_y max_y*1.05]);
% % %         xticks([min_x (max_x+min_x)/2 max_x]); yticks([min_y (max_y+min_y)/2 max_y]);
% % %         % xtickformat('%.1d'); ytickformat('%.1d'); 
% % %         if round(min_x,2) ~= 0 
% % %             xticklabels({num2str(min_x,'%.2f'),num2str((max_x+min_x)/2,'%.2f'),...
% % %                 num2str(max_x,'%.2f')});
% % %         else
% % %             xticklabels({'0',num2str((max_x+min_x)/2,'%.2f'),...
% % %                 num2str(max_x,'%.2f')});
% % %         end
% % %         if strcmp(datsetnames{i},'Clavaguera')
% % %             yticklabels({num2str(min_y,'%.3f'),num2str((max_y+min_y)/2,'%.2f'),...
% % %                     num2str(max_y,'%.2f')});
% % %         else
% % %             if round(min_y,2) ~= 0 
% % %                 yticklabels({num2str(min_y,'%.2f'),num2str((max_y+min_y)/2,'%.2f'),...
% % %                     num2str(max_y,'%.2f')});
% % %             else
% % %                 yticklabels({'0',num2str((max_y+min_y)/2,'%.2f'),...
% % %                     num2str(max_y,'%.2f')});
% % %             end
% % %         end
% % %         % ax = gca; ax.YAxis.Exponent = -1; ax.XAxis.Exponent = -1;
% % %         subs_top3 = subclasses_top3{i};
% % %         text(0.05*(max_x-min_x)+min_x, 0.925*(max_y-min_y)+min_y, sprintf('R^2 = %.2f',mdls{i}.Rsquared.Adjusted),...
% % %             'FontName','Times','FontSize',16);
% % %         title(datsetlabels{i},'FontSize',20);
% % %         set(gca,'FontSize',16,'FontName','Times');
% % %     end
% % %     han=axes(f,'visible','off'); 
% % %     han.XLabel.Visible='on';
% % %     han.YLabel.Visible='on';
% % %     ylh = ylabel(han,'Observed Pathology at End Time Point','FontSize',20,...
% % %         'FontName','Times','FontWeight','bold');
% % %     ylh.Position(1) = ylh.Position(1) - abs(ylh.Position(1) * 0.75);
% % %     xlh = xlabel(han,'Predicted Pathology at End Time Point','FontSize',20,...
% % %         'FontName','Times','FontWeight','bold');
% % %     xlh.Position(2) = xlh.Position(2) - abs(xlh.Position(2) * 0.5);
% % %     print('Top3Scatters_ByCorr','-dpng','-r300'); close;
% % % end
% % % 
% % % %% Cell Type Cross-Correlation Matrix
% 
