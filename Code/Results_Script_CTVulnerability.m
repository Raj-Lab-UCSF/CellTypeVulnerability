%% 1. Load data and filter out non-P301S datasets
clear; clc; rng(0);
matdir = '/Users/justintorok/Documents/MATLAB/CellTypeVulnerability_Project/CellTypeVulnerability/MatFiles';
addpath('/Users/justintorok/Documents/MATLAB/CellTypeVulnerability_Project/CellTypeVulnerability/Code/violin');
datapath = '/Users/justintorok/Documents/MATLAB/CellTypeVulnerability_Project/Large_MatFiles';
figdirectory = '/Users/justintorok/Documents/MATLAB/CellTypeVulnerability_Project/Figures/DraftFigs';
load([matdir filesep 'Mouse_Tauopathy_Data_HigherQ.mat'],'mousedata_struct');
datsetnames = fieldnames(mousedata_struct);

%% 2. Univariate analysis, cell-type-based vulnerability
%% 2.1 Correlation box plots, cell types, end timepoint
ctdataset = 'Yao';
load([datapath filesep 'Yao_Dependencies.mat']);
subclasses = classkey;
plotting = 1;
savenclose = 0;
corrtype = 'Pearson';
ctmat = outstruct.Bmeans;
t = 'end';
seedcorr = 1;
cmap = [[0 0.75 1]; [1 0 0.5]];
figtype = 'Yao';

[corrmat_t,logpmat_t] = CorrelationCalculator_singletimepoint(datsetnames,t,...
    mousedata_struct,ctmat,corrtype,seedcorr,matdir);
if plotting
    CorrelationBarPlot(corrmat_t,datsetnames,subclasses,corrtype,...
        cmap,figtype,savenclose,figdirectory);
    PValuePlot(logpmat_t,datsetnames,subclasses,corrtype,...
        copper(1000),cmap,savenclose,figdirectory);
    [classes,classmeans,pvals1,pvals2] = ClassViolinPlot(corrmat_t,subclasses,corrtype,...
        cmap,savenclose,figdirectory);
end

%% 2.2 Top 2 Cell Types, Brainframe 
% Requires the Brainframe repo: https://github.com/Raj-Lab-UCSF/Brainframe
brainframedir = '/Users/justintorok/Documents/MATLAB/Brainframe-Dev/Brainframe';
addpath(brainframedir)
corrmat_end_mean = mean(corrmat_t);
[~,maxind] = max(corrmat_end_mean);
[~,minind] = min(corrmat_end_mean);
toptypeinds = [maxind,minind];

plotting = 1;
savenclose = 0;
if length(subclasses) == 42 % Yao
    if plotting
        % Define colormap based on cell class
        nonneuronal_inds = ismember(subclasses,{'Endo','Astro','Oligo',...
            'Micro-PVM','SMC-Peri','VLMC'});
        gaba_inds = ismember(subclasses,{'Lamp5','Sncg','Meis2','CR',...
            'Pvalb','Sst','Sst Chodl','Vip'});
        ctxtest = @(x) strcmp(x(end),'X');
        glutctx_inds = logical(cell2mat(cellfun(ctxtest,subclasses,'UniformOutput',false)));
        gluthipp_inds = ~logical(nonneuronal_inds + gaba_inds + glutctx_inds);
        indcell = {glutctx_inds,gluthipp_inds,gaba_inds,nonneuronal_inds};
        indtest = glutctx_inds + 2*gluthipp_inds + 3*gaba_inds + 4*nonneuronal_inds;
        cmap_col = [[0 0.75 1]; [1 0 0.5]];
        cmap = twocolor(cmap_col(1,:),cmap_col(2,:),length(indcell));
        voxthreshes = [0.6,0.6]; % Brainframe parameter
        
        for i = 1:length(toptypeinds)
            ctdata = outstruct.corrB(:,toptypeinds(i));
            newVoxMap = zeros(size(GENGDmod));
            newVoxMap(nonzerovox) = ctdata;
            datinput = imresize3(newVoxMap,[133 81 115]);
            datinput(datinput < 0) = 0;
            col_base = cmap(indtest(toptypeinds(i)),:);
            col_min = (col_base + 1)/2;
            nbin = 10;
            cmap_i = twocolor(col_min,col_base,nbin);
            input_struct = brainframe_inputs_mouse(brainframedir,'data',datinput,...
                                                        'voxthresh',voxthreshes(i),...
                                                        'nbin',nbin,...
                                                        'voxUreg',0,...
                                                        'xfac',0.02,...
                                                        'pointsize',0.1,...
                                                        'bgcolor','w',...
                                                        'img_format','tiffn',...
                                                        'cmap',cmap_i,...
                                                        'regsUbins',0,...
                                                        'img_directory',figdirectory,...
                                                        'img_labels',['Yao_' subclasses{toptypeinds(i)}],...
                                                        'img_renderer','painters',...
                                                        'savenclose',savenclose);
            brainframe(input_struct);
        end
    else
        % % Finish later for Tasic/Zeisel   
    end
end

%% 2.3 End-timepoint pathology glassbrains
brainframedir = '/Users/justintorok/Documents/MATLAB/Brainframe-Dev/Brainframe';
addpath(brainframedir)
savenclose = 0;
reggroups_ = zeros(213,1); %Chunk of code to define region_groups
amy = 1:11; cer = 12:23; sub = 24:26; hip = 27:37; hyp = 38:57;
ncx = 58:95; med = 96:120; mid = 121:141; olf = 142:149; pal = 150:157;
pon = 158:170; str = 171:178; tha = 179:213;
reggroups_(amy) = 1; reggroups_(cer) = 2; reggroups_(sub) = 3; 
reggroups_(hip) = 4; reggroups_(hyp) = 5; reggroups_(ncx) = 6;
reggroups_(med) = 7; reggroups_(mid) = 8; reggroups_(olf) = 9;
reggroups_(pal) = 10; reggroups_(pon) = 11; reggroups_(str) = 12;
reggroups_(tha) = 13;
reggroups_ = [reggroups_;reggroups_];
cmap_ = hsv(length(unique(reggroups_)));
ngrad = 3;

for k = 1
    datset = 'IbaP301S';
    datinput_data = DataToCCF([],datset,matdir);
    datinput_k = datinput_data(:,1);
    nany = isnan(datinput_k);
    datinput_k(nany) = 0;
    if ~strcmp(datset,'Hurtado')
        xfac = 0.3*(max(datinput_k)/max(datinput_data(~nany,1)))^(1/3);
    else     
        xfac = 0.15*(max(datinput_k)/max(datinput_data(~nany,1)))^(1/3);
    end
    reggroups_data = zeros(length(reggroups_),1);
    cmap_data = zeros(length(unique(reggroups_))*ngrad,3);
    for i = 1:length(unique(reggroups_))
        cmap_i = cmap_(i,:);
        reggroup_i_inds = (reggroups_ == i);
        for j = 1:ngrad
            newgroupind = (i-1)*ngrad + j;
            thresh_j = j*100/ngrad;
            zeroinds = (reggroups_data == 0);
            threshinds = (datinput_k <= prctile(nonzeros(datinput_k),thresh_j));
            ij_inds = (zeroinds + threshinds + reggroup_i_inds == 3);
            reggroups_data(ij_inds) = newgroupind;
            cmap_data(newgroupind,:) = (1/2)*cmap_i + (1/2)*(((ngrad-j)*ones(1,3) + j*cmap_i)/ngrad);
        end
    end
    imglab = sprintf('PathologyBrainframe_Data_%s_t%s_%s',datset,'end',ctdataset);
    input_struct_data = brainframe_inputs_mouse(brainframedir,'data',datinput_k,...
                                                'voxUreg',1,...
                                                'xfac',xfac,...
                                                'pointsize',5,...
                                                'norm_method','max',...
                                                'bgcolor','w',...
                                                'img_format','tiffn',...
                                                'cmap',cmap_data,...
                                                'region_groups',reggroups_data,...
                                                'centered',[0 1],...
                                                'img_directory',figdirectory,...
                                                'img_labels',imglab,...
                                                'img_renderer','painters',...
                                                'savenclose',savenclose);
    brainframe(input_struct_data);
end


%% 3. Gene-based vulnerability
%% 3.1 Gene expression distance from top cell types
plotting = 1;
savenclose = 0;
genemat_allgenes = genevct_allgenes;
genemat_MRx3 = genevct(sort(geneinds(1:outstruct.nGen)),:);
ctmat = outstruct.Bmeans;
corrtype = 'Pearson';
genemattype = 'MRx3';
neuronly = 1;
usewls = 0;
usepos = 1;
seedcorr = 1;
t = 'end';
corrmat_t = CorrelationCalculator_singletimepoint(datsetnames,t,...
    mousedata_struct,ctmat,corrtype,seedcorr,matdir);
cmap = [[0 0.75 1]; [1 0 0.5]];

if plotting
    for i = 1:length(neuronly)
        for j = 1:length(usepos)
            [dist,tau,inds] = GeneExpressionDistance_vs_Tau_Plot(genemat_allgenes,genemat_MRx3,...
                genemattype,subclasses,neuronly(i),corrmat_t,corrtype,cmap,usewls,...
                usepos(j),savenclose,figdirectory);
        end
    end
end

%% 3.2.1 Spatial eigenanalysis 
% genemat_allgenes = genevct_allgenes;
rng('default');
clc
nonneuronal_inds = ismember(subclasses,{'Endo','Astro','Oligo',...
    'Micro-PVM','SMC-Peri','VLMC'});
gaba_inds = ismember(subclasses,{'Lamp5','Sncg','Meis2','CR',...
    'Pvalb','Sst','Sst Chodl','Vip'});
ctxtest = @(x) strcmp(x(end),'X');
glutctx_inds = logical(cell2mat(cellfun(ctxtest,subclasses,'UniformOutput',false)));
gluthipp_inds = ~logical(nonneuronal_inds + gaba_inds + glutctx_inds);
indcell = {glutctx_inds,gluthipp_inds,gaba_inds,nonneuronal_inds};
indtest = glutctx_inds + 2*gluthipp_inds + 3*gaba_inds + 4*nonneuronal_inds;
cmap_col = [[0 0.75 1]; [1 0 0.5]];
cmap_base = twocolor(cmap_col(1,:),cmap_col(2,:),length(indcell));
cmap_text = zeros(length(indtest),3);
for i = 1:length(unique(indtest))
    cmap_text(indtest == i,:) = repmat(cmap_base(i,:),sum(indtest==i),1);
end

ctmat = outstruct.Bmeans; 
ctmat = ctmat / max(ctmat(:));
D_spatial = squareform(pdist(ctmat.','correlation'));
% S_spatial = max(D_spatial(:)) - D_spatial;
% S_spatial = 1./D_spatial; 
S_spatial = exp(1).^(-D_spatial.^2);
S_spatial(logical(eye(size(S_spatial)))) = 0;
S_spatial = (S_spatial - min(S_spatial(:)))/...
    (max(S_spatial(:))-min(S_spatial(:)));
nodesign = sign(mean(corrmat_t).');
cmapidx = (nodesign + 3)/2;
cmap_all = NaN(length(nodesign),3);
cmap = [[0 0 1]; [1 0 0]];
for i = 1:size(cmap,1)
    inds = cmapidx == i;
    cmap_all(inds,:) = repmat(cmap(i,:),sum(inds),1);
end
markersizes = 2000*(abs(mean(corrmat_t).')).^(0.5);
% [~,V_sc] = spectralcluster(S_spatial,3,'Distance','precomputed');
L_spat = diag(sum(S_spatial)) - S_spatial;
% L_sc = eye(size(S_spatial)) - diag(sum(S_spatial))^(-1)*S_spatial;
[V_spat,~] = eig(L_spat);
[~,V_pca] = pca(ctmat.');

figure('Units','inches','Position',[0 0 25,8]); 
subplot(1,2,1); hold on;
for i = 1:length(unique(indtest))
    inds = indtest==i;
    h = scatter3(V_spat(inds,2),V_spat(inds,3),V_spat(inds,4),markersizes(inds),cmap_all(inds,:),'filled',...
        'MarkerEdgeColor',cmap_base(i,:),'LineWidth',3);
    h.MarkerFaceAlpha = 0.5;
end
% dx = 0; dy = 0.02;
% for i = 1:length(unique(indtest))
%     text(V_sc(indtest==i,2)+dx, V_sc(indtest==i,3)+dy,subclasses(indtest==i),...
%         'FontSize',12,'FontName','Times',...
%         'HorizontalAlignment','center','Color',cmap_text(i,:));
% end
xlabel('V_2, L'); 
ylabel('V_3, L'); 
zlabel('V_4, L')
% xlim(1.2*[min(V_sc(:,2)),max(V_sc(:,2))]);
% ylim(1.2*[min(V_sc(:,3)),max(V_sc(:,3))]);
set(gca,'FontSize',16,'FontName','Times');
view([1 1 1])
subplot(1,2,2); hold on;
for i = 1:length(unique(indtest))
    inds = indtest==i;
    h = scatter3(V_pca(inds,1),V_pca(inds,2),V_pca(inds,3),markersizes(inds),cmap_all(inds,:),'filled',...
        'MarkerEdgeColor',cmap_base(i,:),'LineWidth',3);
    h.MarkerFaceAlpha = 0.5;
end
% dx = 0; dy = 0.02;
% for i = 1:length(unique(indtest))
%     text(V_sc(indtest==i,2)+dx, V_sc(indtest==i,3)+dy,subclasses(indtest==i),...
%         'FontSize',12,'FontName','Times',...
%         'HorizontalAlignment','center','Color',cmap_text(i,:));
% end
xlabel('PC_1'); 
ylabel('PC_2'); 
zlabel('PC_3')
% xlim(1.2*[min(V_sc(:,2)),max(V_sc(:,2))]);
% ylim(1.2*[min(V_sc(:,3)),max(V_sc(:,3))]);
set(gca,'FontSize',16,'FontName','Times');
view([1 1 1])
sgtitle('Spatial, All Types','FontName','Times','FontSize',20)

%% 3.2.2 Spatial eigenanalysis (neurons only)
% genemat_allgenes = genevct_allgenes;
rng('default');
clc
nonneuronal_inds = ismember(subclasses,{'Endo','Astro','Oligo',...
    'Micro-PVM','SMC-Peri','VLMC'});
gaba_inds = ismember(subclasses,{'Lamp5','Sncg','Meis2','CR',...
    'Pvalb','Sst','Sst Chodl','Vip'});
ctxtest = @(x) strcmp(x(end),'X');
glutctx_inds = logical(cell2mat(cellfun(ctxtest,subclasses,'UniformOutput',false)));
gluthipp_inds = ~logical(nonneuronal_inds + gaba_inds + glutctx_inds);
indcell = {glutctx_inds,gluthipp_inds,gaba_inds,nonneuronal_inds};
indtest = glutctx_inds + 2*gluthipp_inds + 3*gaba_inds + 4*nonneuronal_inds;
indtest(nonneuronal_inds) = [];
cmap_col = [[0 0.75 1]; [1 0 0.5]];
cmap_base = twocolor(cmap_col(1,:),cmap_col(2,:),length(indcell));
cmap_text = zeros(length(indtest),3);
for i = 1:length(unique(indtest))
    cmap_text(indtest == i,:) = repmat(cmap_base(i,:),sum(indtest==i),1);
end

ctmat = outstruct.Bmeans; 
ctmat = ctmat / max(ctmat(:));
ctmat_neuron = ctmat;
ctmat_neuron(:,nonneuronal_inds) = [];
ctmat_neuron = ctmat_neuron / max(ctmat_neuron(:));
D_spatial_neuron = squareform(pdist(ctmat_neuron.','cosine'));
S_spatial_neuron = max(D_spatial_neuron(:)) - D_spatial_neuron;
% S_spatial = 1./D_spatial; 
S_spatial(logical(eye(size(S_spatial)))) = 0;
S_spatial_neuron = (S_spatial_neuron - min(S_spatial_neuron(:)))/...
    (max(S_spatial_neuron(:))-min(S_spatial_neuron(:)));
nodesign = sign(mean(corrmat_t).');
cmapidx = (nodesign + 3)/2;
cmap_all = NaN(length(nodesign),3);
cmap = [[0 0 1]; [1 0 0]];
for i = 1:size(cmap,1)
    inds = cmapidx == i;
    cmap_all(inds,:) = repmat(cmap(i,:),sum(inds),1);
end
markersizes = 2000*(abs(mean(corrmat_t).')).^(0.5);
markersizes(nonneuronal_inds) = [];
cmap_all(nonneuronal_inds,:) = [];
% [~,V_sc] = spectralcluster(S_spatial,3,'Distance','precomputed');
L_spat = diag(sum(S_spatial_neuron)) - S_spatial_neuron;
% L_sc = eye(size(S_spatial_neuron)) - diag(sum(S_spatial_neuron))^(-1)*S_spatial_neuron;
[V_spat,~] = eig(L_spat);
[~,V_pca] = pca(ctmat_neuron.');

figure('Units','inches','Position',[0 0 25,8]); 
subplot(1,2,1); hold on;
for i = 1:length(unique(indtest))
    inds = indtest==i;
    h = scatter3(V_spat(inds,2),V_spat(inds,3),V_spat(inds,4),markersizes(inds),cmap_all(inds,:),'filled',...
        'MarkerEdgeColor',cmap_base(i,:),'LineWidth',3);
    h.MarkerFaceAlpha = 0.5;
end
% dx = 0; dy = 0.02;
% for i = 1:length(unique(indtest))
%     text(V_sc(indtest==i,2)+dx, V_sc(indtest==i,3)+dy,subclasses(indtest==i),...
%         'FontSize',12,'FontName','Times',...
%         'HorizontalAlignment','center','Color',cmap_text(i,:));
% end
xlabel('V_2, L'); 
ylabel('V_3, L'); 
zlabel('V_4, L')
% xlim(1.2*[min(V_sc(:,2)),max(V_sc(:,2))]);
% ylim(1.2*[min(V_sc(:,3)),max(V_sc(:,3))]);
set(gca,'FontSize',16,'FontName','Times');
view([1 1 1])
subplot(1,2,2); hold on;
for i = 1:length(unique(indtest))
    inds = indtest==i;
    h = scatter3(V_pca(inds,1),V_pca(inds,2),V_pca(inds,3),markersizes(inds),cmap_all(inds,:),'filled',...
        'MarkerEdgeColor',cmap_base(i,:),'LineWidth',3);
    h.MarkerFaceAlpha = 0.5;
end
% dx = 0; dy = 0.02;
% for i = 1:length(unique(indtest))
%     text(V_sc(indtest==i,2)+dx, V_sc(indtest==i,3)+dy,subclasses(indtest==i),...
%         'FontSize',12,'FontName','Times',...
%         'HorizontalAlignment','center','Color',cmap_text(i,:));
% end
xlabel('PC_1'); 
ylabel('PC_2'); 
zlabel('PC_3')
% xlim(1.2*[min(V_sc(:,2)),max(V_sc(:,2))]);
% ylim(1.2*[min(V_sc(:,3)),max(V_sc(:,3))]);
set(gca,'FontSize',16,'FontName','Times');
view([1 1 1])
sgtitle('Spatial, Neurons Only','FontName','Times','FontSize',20)

%% 3.2.3. Gene eigenanalysis
% genemat_allgenes = genevct_allgenes;
rng('default');
clc
nonneuronal_inds = ismember(subclasses,{'Endo','Astro','Oligo',...
    'Micro-PVM','SMC-Peri','VLMC'});
gaba_inds = ismember(subclasses,{'Lamp5','Sncg','Meis2','CR',...
    'Pvalb','Sst','Sst Chodl','Vip'});
ctxtest = @(x) strcmp(x(end),'X');
glutctx_inds = logical(cell2mat(cellfun(ctxtest,subclasses,'UniformOutput',false)));
gluthipp_inds = ~logical(nonneuronal_inds + gaba_inds + glutctx_inds);
indcell = {glutctx_inds,gluthipp_inds,gaba_inds,nonneuronal_inds};
indtest = glutctx_inds + 2*gluthipp_inds + 3*gaba_inds + 4*nonneuronal_inds;
cmap_col = [[0 0.75 1]; [1 0 0.5]];
cmap_base = twocolor(cmap_col(1,:),cmap_col(2,:),length(indcell));
cmap_text = zeros(length(indtest),3);
for i = 1:length(unique(indtest))
    cmap_text(indtest == i,:) = repmat(cmap_base(i,:),sum(indtest==i),1);
end

genemat_MRx3 = genevct(sort(geneinds(1:outstruct.nGen)),:); 
genemat_MRx3 = genemat_MRx3/max(genemat_MRx3(:));
D_gene = squareform(pdist(genemat_MRx3.','correlation'));
S_gene = max(D_gene(:)) - D_gene;
% S_spatial = 1./D_spatial; 
% S_gene = exp(1).^(-D_gene.^2);
S_gene(logical(eye(size(S_gene)))) = 0;
S_gene = (S_gene - min(S_gene(:)))/...
    (max(S_gene(:))-min(S_gene(:)));
S_gene(logical(eye(size(S_gene)))) = 0;
% S_gene = corrcoef(genemat_MRx3); 
% S_gene = (S_gene - min(S_gene(:)))/...
%     (max(S_gene(:))-min(S_gene(:)));
% S_gene = S_gene - eye(size(S_gene));
% G_gene = graph(S_gene);
% G_gene.Nodes.Names = subclasses;
% edgeweights = G_gene.Edges.Weight;
% edgeweights = zeros(length(edgeweights),1);
% G_gene = rmedge(G_gene,find(edgeweights == 0));
nodesign = sign(mean(corrmat_t).');
cmapidx = (nodesign + 3)/2;
cmap_all = NaN(length(nodesign),3);
cmap = [[0 0 1]; [1 0 0]];
for i = 1:size(cmap,1)
    inds = cmapidx == i;
    cmap_all(inds,:) = repmat(cmap(i,:),sum(inds),1);
end
markersizes = 2000*(abs(mean(corrmat_t).')).^(0.5);
% [~,V_sc] = spectralcluster(S_gene,3,'Distance','precomputed');
L_spat = diag(sum(S_gene)) - S_gene;
[V_spat,~] = eig(L_spat);
[~,V_pca] = pca(genemat_MRx3.');

figure('Units','inches','Position',[0 0 25,8]); 
subplot(1,2,1);hold on;
for i = 1:length(unique(indtest))
    inds = indtest==i;
    h = scatter3(V_spat(inds,2),V_spat(inds,3),V_spat(inds,4),markersizes(inds),cmap_all(inds,:),'filled',...
        'MarkerEdgeColor',cmap_base(i,:),'LineWidth',3);
    h.MarkerFaceAlpha = 0.5;
end
% h = scatter3(V_sc(:,2),V_sc(:,3),V_sc(:,4),markersizes,cmap_all,'filled');
% h.MarkerFaceAlpha = 0.25;
% dx = 0; dy = 0.03;
% for i = 1:length(unique(indtest))
%     text(V_sc(indtest==i,2)+dx, V_sc(indtest==i,3)+dy,subclasses(indtest==i),...
%         'FontSize',12,'FontName','Times',...
%         'HorizontalAlignment','center','Color',cmap_text(i,:));
% end
xlabel('V_2, L'); 
ylabel('V_3, L'); 
zlabel('V_4, L')
% xlim([3*min(V_sc(:,2)),1.1*max(V_sc(:,2))]);
% ylim(1.2*[min(V_sc(:,3)),max(V_sc(:,3))]);
set(gca,'FontSize',16,'FontName','Times');
view([1 1 1])
subplot(1,2,2); hold on;
for i = 1:length(unique(indtest))
    inds = indtest==i;
    h = scatter3(V_pca(inds,1),V_pca(inds,2),V_pca(inds,3),markersizes(inds),cmap_all(inds,:),'filled',...
        'MarkerEdgeColor',cmap_base(i,:),'LineWidth',3);
    h.MarkerFaceAlpha = 0.5;
end
% h = scatter(V_pca(:,1),V_pca(:,2),markersizes,cmap_all,'filled');
% h.MarkerFaceAlpha = 0.25;
% dx = 0; dy = 0.2;
% for i = 1:length(unique(indtest))
%     text(V_pca(indtest==i,1)+dx,V_pca(indtest==i,2)+dy,subclasses(indtest==i),...
%         'FontSize',12,'FontName','Times',...
%         'HorizontalAlignment','center','Color',cmap_text(i,:));
% end
xlabel('PC_1'); 
ylabel('PC_2');
zlabel('PC_3')
% xlim([1.4*min(V_pca(:,1)),1.1*max(V_pca(:,1))]);
% ylim(1.2*[min(V_pca(:,2)),max(V_pca(:,2))]);
set(gca,'FontSize',16,'FontName','Times');
view([1,1,1])
sgtitle('Gene, All Types','FontName','Times','FontSize',20)

%% 3.2.4. Gene eigenanalysis, neurons onlyl
% genemat_allgenes = genevct_allgenes;
rng('default');
clc
nonneuronal_inds = ismember(subclasses,{'Endo','Astro','Oligo',...
    'Micro-PVM','SMC-Peri','VLMC'});
gaba_inds = ismember(subclasses,{'Lamp5','Sncg','Meis2','CR',...
    'Pvalb','Sst','Sst Chodl','Vip'});
ctxtest = @(x) strcmp(x(end),'X');
glutctx_inds = logical(cell2mat(cellfun(ctxtest,subclasses,'UniformOutput',false)));
gluthipp_inds = ~logical(nonneuronal_inds + gaba_inds + glutctx_inds);
indcell = {glutctx_inds,gluthipp_inds,gaba_inds,nonneuronal_inds};
indtest = glutctx_inds + 2*gluthipp_inds + 3*gaba_inds + 4*nonneuronal_inds;
indtest(nonneuronal_inds) = [];
cmap_col = [[0 0.75 1]; [1 0 0.5]];
cmap_base = twocolor(cmap_col(1,:),cmap_col(2,:),length(indcell));
% cmap_text = zeros(length(indtest),3);
% for i = 1:length(unique(indtest))
%     cmap_text(indtest == i,:) = repmat(cmap_base(i,:),sum(indtest==i),1);
% end

genemat_MRx3 = genevct(sort(geneinds(1:outstruct.nGen)),:); 
genemat_MRx3 = genemat_MRx3/max(genemat_MRx3(:));
genemat_MRx3_neuron = genemat_MRx3;
genemat_MRx3_neuron(:,nonneuronal_inds) = [];
genemat_MRx3_neuron = genemat_MRx3_neuron/max(genemat_MRx3_neuron(:));
S_gene_neuron = corrcoef(genemat_MRx3_neuron); 
S_gene_neuron = (S_gene_neuron - min(S_gene_neuron(:)))/...
    (max(S_gene_neuron(:))-min(S_gene_neuron(:)));
S_gene_neuron = S_gene_neuron - eye(size(S_gene_neuron));
nodesign = sign(mean(corrmat_t).');
cmapidx = (nodesign + 3)/2;
cmap_all = NaN(length(nodesign),3);
cmap = [[0 0 1]; [1 0 0]];
for i = 1:size(cmap,1)
    inds = cmapidx == i;
    cmap_all(inds,:) = repmat(cmap(i,:),sum(inds),1);
end
markersizes = 2000*(abs(mean(corrmat_t).')).^(0.5);
markersizes(nonneuronal_inds) = [];
cmap_all(nonneuronal_inds,:) = [];
% [~,V_sc] = spectralcluster(S_gene,3,'Distance,'precomputed');
L_spat = diag(sum(S_gene_neuron)) - S_gene_neuron;
[V_spat,~] = eig(L_spat);
[~,V_pca] = pca(genemat_MRx3_neuron.');

figure('Units','inches','Position',[0 0 25 8]); 
subplot(1,2,1);hold on;
for i = 1:length(unique(indtest))
    inds = indtest==i;
    h = scatter3(V_spat(inds,2),V_spat(inds,3),V_spat(inds,4),markersizes(inds),cmap_all(inds,:),'filled',...
        'MarkerEdgeColor',cmap_base(i,:),'LineWidth',3);
    h.MarkerFaceAlpha = 0.5;
end
% h = scatter3(V_sc(:,2),V_sc(:,3),V_sc(:,4),markersizes,cmap_all,'filled');
% h.MarkerFaceAlpha = 0.25;
% dx = 0; dy = 0.03;
% for i = 1:length(unique(indtest))
%     text(V_sc(indtest==i,2)+dx, V_sc(indtest==i,3)+dy,subclasses(indtest==i),...
%         'FontSize',12,'FontName','Times',...
%         'HorizontalAlignment','center','Color',cmap_text(i,:));
% end
xlabel('V_2, L'); 
ylabel('V_3, L'); 
zlabel('V_4, L')
xlim([3*min(V_spat(:,2)),1.1*max(V_spat(:,2))]);
ylim(1.2*[min(V_spat(:,3)),max(V_spat(:,3))]);
set(gca,'FontSize',16,'FontName','Times');
view([1 1 1])
subplot(1,2,2); hold on;
for i = 1:length(unique(indtest))
    inds = indtest==i;
    h = scatter3(V_pca(inds,1),V_pca(inds,2),V_pca(inds,3),markersizes(inds),cmap_all(inds,:),'filled',...
        'MarkerEdgeColor',cmap_base(i,:),'LineWidth',3);
    h.MarkerFaceAlpha = 0.5;
end
% h = scatter(V_pca(:,1),V_pca(:,2),markersizes,cmap_all,'filled');
% h.MarkerFaceAlpha = 0.25;
% dx = 0; dy = 0.2;
% for i = 1:length(unique(indtest))
%     text(V_pca(indtest==i,1)+dx,V_pca(indtest==i,2)+dy,subclasses(indtest==i),...
%         'FontSize',12,'FontName','Times',...
%         'HorizontalAlignment','center','Color',cmap_text(i,:));
% end
xlabel('PC_1'); 
ylabel('PC_2');
zlabel('PC_3')
% xlim([1.4*min(V_pca(:,1)),1.1*max(V_pca(:,1))]);
% ylim(1.2*[min(V_pca(:,2)),max(V_pca(:,2))]);
set(gca,'FontSize',16,'FontName','Times');
view([1,1,1])
sgtitle('Gene, Neurons Only','FontName','Times','FontSize',20)

%% 3.2.5 eigenanalysis 
% Add in scatterplots of delta R vs. cosine distance
% genemat_allgenes = genevct_allgenes;
rng('default');
clc
nonneuronal_inds = ismember(subclasses,{'Endo','Astro','Oligo',...
    'Micro-PVM','SMC-Peri','VLMC'});
gaba_inds = ismember(subclasses,{'Lamp5','Sncg','Meis2','CR',...
    'Pvalb','Sst','Sst Chodl','Vip'});
glutctx_other_inds = find(ismember(subclasses,{'Car3','L4 RSP-ACA'}));
ctxtest = @(x) strcmp(x(end),'X');
glutctx_inds = find(logical(cell2mat(cellfun(ctxtest,subclasses,'UniformOutput',false))));
glutctx_inds = sort([glutctx_other_inds; glutctx_inds]);
glutctx_inds = ismember(subclasses,subclasses(glutctx_inds));
gluthipp_inds = ~logical(nonneuronal_inds + gaba_inds + glutctx_inds);
indcell = {glutctx_inds,gluthipp_inds,gaba_inds,nonneuronal_inds};
indtest = glutctx_inds + 2*gluthipp_inds + 3*gaba_inds + 4*nonneuronal_inds;
cmap_col = [[0 0.75 1]; [1 0 0.5]];
cmap_base = twocolor(cmap_col(1,:),cmap_col(2,:),length(indcell));

% Rinds = abs(mean(corrmat_t)) >= prctile(abs(mean(corrmat_t)),25);
% corrmat_t_Rinds = mean(corrmat_t(:,Rinds));
% subclasses_Rinds = subclasses(Rinds);
ctmat = outstruct.Bmeans;
ctmat = ctmat / max(ctmat(:));
D_spatial = squareform(pdist(ctmat.','cosine'));
S_spatial = 1./D_spatial;
S_spatial(logical(eye(size(S_spatial)))) = 0;
S_spatial = (S_spatial - min(S_spatial(:)))/...
    (max(S_spatial(:))-min(S_spatial(:)));

genemat_MRx3 = genevct(sort(geneinds(1:outstruct.nGen)),:); 
genemat_MRx3 = genemat_MRx3/max(genemat_MRx3(:));
D_gene = squareform(pdist(genemat_MRx3.','cosine'));
S_gene = 1./D_gene;
S_gene(logical(eye(size(S_gene)))) = 0;
% S_gene = log10(log10(S_gene+1)+1);
% S_gene(1:36,:) = S_gene(1:36,:)*max(max(S_gene(37:42,37:42)))/max(max(S_gene(1:36,1:36)));
% S_gene(37:42,1:36) = S_gene(37:42,1:36)*max(max(S_gene(37:42,37:42)))/max(max(S_gene(1:36,1:36)));
S_gene = (S_gene - min(S_gene(:)))/...
    (max(S_gene(:))-min(S_gene(:)));

nodesign = sign(mean(corrmat_t).');
cmapidx = (nodesign + 3)/2;
cmap_all = NaN(length(nodesign),3);
cmap = [[0 0 1]; [1 0 0]];
for i = 1:size(cmap,1)
    inds = cmapidx == i;
    cmap_all(inds,:) = repmat(cmap(i,:),sum(inds),1);
end
% markersizes = 2500*log(abs(mean(corrmat_t).')+1);
markersizes = 2500*abs(mean(corrmat_t).');
yoffsets = markersizes / mean(markersizes); yoffsets = yoffsets - 1;
yoffsets = 0.025*(1 + 0.3*yoffsets);

L_spat = eye(size(S_spatial)) - diag(sum(S_spatial).^(-1))*S_spatial;
[V_spat,~] = eig(L_spat);
L_gene = eye(size(S_gene)) - diag(sum(S_gene).^(-1))*S_gene;
[V_gene,~] = eig(L_gene);

figure('Units','inches','Position',[0 0 14 6]); 
tiledlayout(1,2)
nexttile; hold on;
for i = 1:length(unique(indtest))
    inds = indtest==i;
    h = scatter(V_spat(inds,2),V_spat(inds,3),markersizes(inds),cmap_all(inds,:),'filled');
    h.MarkerFaceAlpha = 0.25;
    dx = 0; dy = yoffsets; 
    text(V_spat(inds,2)+dx,V_spat(inds,3)+dy(inds),...
        subclasses(inds),'FontSize',14,'FontName','Times',...
        'HorizontalAlignment','center','Color',cmap_base(i,:));
%     h = scatter(V_spat(inds,2),V_spat(inds,3),markersizes(inds),...
%         cmap_all(inds,:),'filled','MarkerEdgeColor',cmap_base(i,:),...
%         'LineWidth',2);
%     h.MarkerFaceAlpha = 0.25;
%     x = V_spat(inds,2); y = V_spat(inds,3); 
%     mrksiz = markersizes(inds); clr = cmap_all(inds,:);
%     for j = 1:length(x)
%         h = scatter(x(j),y(j),mrksiz(j),...
%             cmap_base(i,:),'filled','MarkerEdgeColor',clr(j,:),...
%             'LineWidth',1);
%         h.MarkerFaceAlpha = 0.5;
%     end
end
maxx = max(V_spat(:,2)); minx = min(V_spat(:,2));
maxy = max(V_spat(:,3)); miny = min(V_spat(:,3));
xlim([minx-0.05 maxx+0.05]); ylim([miny-0.05 maxy+0.05]);
xticks([minx,(minx+maxx)/2,maxx]); xtickformat('%.2f');
yticks([miny,(miny+maxy)/2,maxy]); ytickformat('%.2f');
% yticklabels({num2str(miny,'%.1f'),'0',num2str(maxy,'%.1f')});
xlabel('$v_{2}, L_{spatial}$','Interpreter','latex'); 
ylabel('$v_{3}, L_{spatial}$','Interpreter','latex'); 
title('Spatial');
set(gca,'FontSize',18,'FontName','Times');

nexttile; hold on;
for i = 1:length(unique(indtest))
    inds = indtest==i;
    h = scatter(V_gene(inds,2),V_gene(inds,3),markersizes(inds),cmap_all(inds,:),'filled');
    h.MarkerFaceAlpha = 0.25;
    dx = 0; dy = yoffsets; 
    text(V_gene(inds,2)+dx,V_gene(inds,3)+dy(inds),...
        subclasses(inds),'FontSize',14,'FontName','Times',...
        'HorizontalAlignment','center','Color',cmap_base(i,:));
%     h = scatter(V_gene(inds,2),V_gene(inds,3),markersizes(inds),...
%         cmap_all(inds,:),'filled','MarkerEdgeColor',cmap_base(i,:),...
%         'LineWidth',2);
%     h = scatter(V_gene(inds,2),V_gene(inds,3),markersizes(inds),...
%         cmap_base(i,:),'filled','MarkerEdgeColor',cmap_all(inds,:),...
%         'LineWidth',2);
%     h.MarkerFaceAlpha = 0.25;
%     x = V_gene(inds,2); y = V_gene(inds,3); 
%     mrksiz = markersizes(inds); clr = cmap_all(inds,:);
%     for j = 1:length(x)
%         h = scatter(x(j),y(j),mrksiz(j),...
%             cmap_base(i,:),'filled','MarkerEdgeColor',clr(j,:),...
%             'LineWidth',1);
%         h.MarkerFaceAlpha = 0.5;
%     end
end
maxx = max(V_gene(:,2)); minx = min(V_gene(:,2));
maxy = max(V_gene(:,3)); miny = min(V_gene(:,3));
% xlim(1.2*[-0.175 maxx]); ylim(1.2*[miny maxy]);
xlim([minx-0.05 maxx+0.05]); ylim([miny-0.05 maxy+0.05]);
xticks([minx,(minx+maxx)/2,maxx]); xtickformat('%.2f');
yticks([miny,(miny+maxy)/2,maxy]); ytickformat('%.2f');
xlabel('$v_{2}, L_{gene}$','Interpreter','latex'); 
ylabel('$v_{3}, L_{gene}$','Interpreter','latex'); 
title('Gene Expression');
set(gca,'FontSize',18,'FontName','Times');


%% 3.3 Vulnerability from common AD genes
corrtype = 'Pearson';
seedcorr = 1;
load([matdir filesep 'AD_Genes.mat'],'genelist');
t = 'end';
genelist_inds = zeros(1,length(genelist));
for i = 1:length(genelist_inds)
    genelist_inds(i) = find(ismember(gene_names,genelist{i}));
end
genemat_list = voxvgene(:,genelist_inds);
[~,genemat_list] = Voxel_To_Region(genemat_list,matdir);
corrmat_t_gene = CorrelationCalculator_singletimepoint(datsetnames,t,...
    mousedata_struct,genemat_list,corrtype,seedcorr,matdir);

plotting = 1;
savenclose = 1;
cmap = [[1 0 0]; [1 0.75 0]];
figtype = 'AD_Genes';
if plotting
    CorrelationBarPlot(corrmat_t_gene,datsetnames,genelist,corrtype,...
        cmap,figtype,savenclose,figdirectory);
end

%% 3.4 Gene expression glass brains
brainframedir = '/Users/justintorok/Documents/MATLAB/Brainframe-Dev/Brainframe';
addpath(brainframedir)
toptypes = genelist;
toptypeinds = find(ismember(genelist,toptypes));
% [x,toptypeinds] = max(abs(rhurt),[],2);
cmap = twocolor([1 0 0], [1 0.75 0],length(genelist));

plotting = 1;
savenclose = 1;
if plotting
    for i = 1:length(toptypeinds)
        ctdata = genemat_list(:,toptypeinds(i));
        newVoxMap = zeros(size(GENGDmod));
        newVoxMap(nonzerovox) = ctdata;
        datinput = imresize3(newVoxMap,[133 81 115]);
        datinput(datinput < 0) = 0;
        col_base = cmap(toptypeinds(i),:);
        col_min = (col_base + 1)/2;
        nbin = 10;
        cmap_i = twocolor(col_min,col_base,nbin);
        labstr = strrep(genelist{toptypeinds(i)},' ','_');
        labstr = strrep(labstr,'/','-');
        input_struct = brainframe_inputs_mouse(brainframedir,'data',datinput,...
                                                    'voxthresh',0.7,...
                                                    'nbin',nbin,...
                                                    'voxUreg',0,...
                                                    'xfac',0.02,...
                                                    'pointsize',0.1,...
                                                    'bgcolor','w',...
                                                    'img_format','tiffn',...
                                                    'cmap',cmap_i,...
                                                    'regsUbins',0,...
                                                    'img_directory',figdirectory,...
                                                    'img_labels',labstr,...
                                                    'img_renderer','painters',...
                                                    'savenclose',savenclose);
        brainframe(input_struct);
    end
end


%% 4. Internal structure of data
%% 4.1 Cross-correlation matrices with hierarchical clustering
plotting = 1;
savenclose = 1;
corrtype = 'MRx3';
clusttype = 'MRx3';
linktype = 'ward';
disttype = 'euclidean';
uselab = 1;
genemat_allgenes = genevct_allgenes;
genemat_MRx3 = genevct(sort(geneinds(1:outstruct.nGen)),:);
ctmat = outstruct.Bmeans;
cmap_label = [[0 0.75 1]; [1 0 0.5]];
cmap = [];

if plotting
    ClusteringHeatmap(genemat_allgenes,genemat_MRx3,ctmat,subclasses,...
        ctdataset,corrtype,clusttype,cmap,cmap_label,disttype,linktype,...
        uselab,savenclose,figdirectory);
end

%% 4.2 Cross-correlation matrices of data
plotting = 1;
savenclose = 1;
seedcorr = 1;
cmap = [[ones(500,1), 0.9*linspace(1,0.5,500).', 0.9*linspace(1,0,500).'];...
                    [ones(500,1), linspace(0.5,0,500).', 0*ones(500,1)]].^(1/2);

if plotting
    TauPathologyHeatmap(datsetnames,mousedata_struct,cmap,seedcorr,savenclose,figdirectory);
end

%% 5. Multivariate analyses
%% 5.1 Linear models and frequency bar plots, cell types
plotting = 1;
bicplotting = 1;
savenclose = 0;
usebic = 1;
numsigtypes = 5;
thresh = 75;
ctdataset = 'Yao';
corrtype = 'Pearson';
seedcorr = 1;
ctmat = outstruct.Bmeans;
t = 'end';
 
[mdls_bic,subclasses_bic,coeff_vals_bic,pvals_bic_vars] = ...
    LinearModelSelection_BIC_alldatasets(datsetnames,t,mousedata_struct,...
    ctmat,subclasses,corrtype,seedcorr,usebic,thresh,ctdataset,bicplotting,plotting,[],...
    savenclose,figdirectory,matdir);
[mdls_topN,subclasses_topN,coeff_vals_topN,pvals_bic_topN] = LinearModelSelection_TopN_alldatasets(datsetnames,t,...
    mousedata_struct,ctmat,subclasses,numsigtypes,corrtype,seedcorr,ctdataset,plotting,...
    [],savenclose,figdirectory,matdir);
CellTypeFrequencyPlot(subclasses,subclasses_bic,t,ctdataset,'BIC',[[0 0.75 1]; [1 0 0.5]],...
    savenclose,figdirectory);
CellTypeFrequencyPlot(subclasses,subclasses_topN,t,ctdataset,'TopN',[[0 0.75 1]; [1 0 0.5]],...
    savenclose,figdirectory);

%% 5.2 Linear models, AD genes
plotting = 1;
bicplotting = 1;
savenclose = 1;
ctdataset = 'Gene';
corrtype = 'Pearson';
seedcorr = 1;
usebic = 1;
thresh = 50;
numsigtypes = 5;
load([matdir filesep 'AD_Genes.mat'],'genelist');
t = 'end';

genelist_inds = zeros(1,length(genelist));
for i = 1:length(genelist_inds)
    genelist_inds(i) = find(ismember(gene_names,genelist{i}));
end
genemat_list = voxvgene(:,genelist_inds);
[~,genemat_list] = Voxel_To_Region(genemat_list,matdir);

% [mdls_all_gene,subclasses_all_gene] = LinearModelSelection_BIC_alldatasets(datsetnames,t,...
%     mousedata_struct,genemat_list,genelist,length(genelist),corrtype,seedcorr,ctdataset,plotting,...
%     [],savenclose,figdirectory,matdir);
[mdls_bic_gene,subclasses_bic_gene,coeff_vals_gene,pvals_bic_gene] = ...
    LinearModelSelection_BIC_alldatasets(datsetnames,t,mousedata_struct,...
    genemat_list,subclasses,corrtype,seedcorr,usebic,thresh,ctdataset,bicplotting,plotting,[],...
    savenclose,figdirectory,matdir); 
[mdls_topN_gene,subclasses_topN_gene,coeff_vals_topN_gnee,pvals_bic_topN_gene] = ...
    LinearModelSelection_TopN_alldatasets(datsetnames,t,...
    mousedata_struct,genemat_list,subclasses,numsigtypes,corrtype,seedcorr,ctdataset,plotting,...
    [],savenclose,figdirectory,matdir);

%% 6.1 Hurtado per-timepoint
plotting = 1;
bicplotting = 1;
savenclose = 1;
usebic = 1;
ctdataset = 'Yao';
corrtype = 'Pearson';
seedcorr = 1;
datset = 'Hurtado';
ctmat = outstruct.Bmeans;
cmap = twocolor([0,1,0.25],[0.5,0,1],length(mousedata_struct.(datset).time_stamps));

[mdls_bic_hurtado,subclasses_bic_hurtado,xcti,Y,rhurt] = LinearModelSelection_BIC_alltpts(...
    datset,mousedata_struct,ctmat,subclasses,corrtype,seedcorr,usebic,ctdataset,...
    bicplotting,plotting,cmap,savenclose,figdirectory,matdir);

%% 6.2 Hurtado pathology glass-brains, space-filling
brainframedir = '/Users/justintorok/Documents/MATLAB/Brainframe-Dev/Brainframe';
addpath(brainframedir)
datset = 'Hurtado';
tpts = mousedata_struct.(datset).time_stamps;
savenclose = 1;
reggroups_ = zeros(213,1); %Chunk of code to define region_groups
amy = 1:11; cer = 12:23; sub = 24:26; hip = 27:37; hyp = 38:57;
ncx = 58:95; med = 96:120; mid = 121:141; olf = 142:149; pal = 150:157;
pon = 158:170; str = 171:178; tha = 179:213;
reggroups_(amy) = 1; reggroups_(cer) = 2; reggroups_(sub) = 3; 
reggroups_(hip) = 4; reggroups_(hyp) = 5; reggroups_(ncx) = 6;
reggroups_(med) = 7; reggroups_(mid) = 8; reggroups_(olf) = 9;
reggroups_(pal) = 10; reggroups_(pon) = 11; reggroups_(str) = 12;
reggroups_(tha) = 13;
% fore = [amy,sub,hip,olf,pal,str];
% dimes = [hyp,mid,tha];
% hind = [cer,med,pon];
% 
% reggroups_(ncx) = 1;
% reggroups_(fore) = 2;
% reggroups_(dimes) = 3;
% reggroups_(hind) = 4;
reggroups_ = [reggroups_;reggroups_];
% cmap_ = [[1 0 0]; [0 0 1]; [1 0 1]; [1 0.5 0]];
cmap_ = hsv(length(unique(reggroups_)));
ngrad = 3;

datinput_data = DataToCCF([],datset,matdir);
datinput_pred = zeros(size(datinput_data));
for i = 1:size(datinput_pred,2)
    mdlpred = mdls_bic_hurtado{i}.Fitted;
    mdlpred(mdlpred < 0) = 0;
    datinput_pred(:,i) = DataToCCF(mdlpred,datset,matdir);
end

for k = 1:size(datinput_data,2)
    datinput_k = datinput_data(:,k);
    nany = isnan(datinput_k);
    datinput_k(nany) = 0;
    xfac = 0.15*(max(datinput_k)/max(datinput_data(~nany,1)))^(1/3);
    reggroups_data = zeros(length(reggroups_),1);
    cmap_data = zeros(length(unique(reggroups_))*ngrad,3);
    for i = 1:length(unique(reggroups_))
        cmap_i = cmap_(i,:);
        reggroup_i_inds = (reggroups_ == i);
        for j = 1:ngrad
            newgroupind = (i-1)*ngrad + j;
            thresh_j = j*100/ngrad;
            zeroinds = (reggroups_data == 0);
            threshinds = (datinput_k <= prctile(nonzeros(datinput_k),thresh_j));
            ij_inds = (zeroinds + threshinds + reggroup_i_inds == 3);
            reggroups_data(ij_inds) = newgroupind;
%             cmap_data(newgroupind,:) = cmap_i;
%             cmap_data(newgroupind,:) = ((ngrad-j)*ones(1,3) + j*cmap_i)/(ngrad);
            cmap_data(newgroupind,:) = (1/2)*cmap_i + (1/2)*(((ngrad-j)*ones(1,3) + j*cmap_i)/ngrad);
        end
    end
    imglab = sprintf('PathologyBrainframe_Data_%s_t%d_%s',datset,tpts(k),ctdataset);
    input_struct_data = brainframe_inputs_mouse(brainframedir,'data',datinput_k,...
                                                'voxUreg',1,...
                                                'xfac',xfac,...
                                                'pointsize',5,...
                                                'norm_method','max',...
                                                'bgcolor','w',...
                                                'img_format','tiffn',...
                                                'cmap',cmap_data,...
                                                'region_groups',reggroups_data,...
                                                'centered',[0 1],...
                                                'img_directory',figdirectory,...
                                                'img_labels',imglab,...
                                                'img_renderer','painters',...
                                                'savenclose',savenclose);
    brainframe(input_struct_data);

    datinput_k = datinput_pred(:,k);
    nany = isnan(datinput_k);
    datinput_k(nany) = 0;
    xfac = 0.15*(max(datinput_k)/max(datinput_pred(~nany,1)))^(1/3);
    reggroups_pred = zeros(length(reggroups_),1);
    cmap_pred = zeros(length(unique(reggroups_))*ngrad,3);
    for i = 1:length(unique(reggroups_))
        cmap_i = cmap_(i,:);
        reggroup_i_inds = (reggroups_ == i);
        for j = 1:ngrad
            newgroupind = (i-1)*ngrad + j;
            thresh_j = j*100/ngrad;
            zeroinds = (reggroups_pred == 0);
            threshinds = (datinput_k <= prctile(nonzeros(datinput_k),thresh_j));
            ij_inds = (zeroinds + threshinds + reggroup_i_inds == 3);
            reggroups_pred(ij_inds) = newgroupind;
%             cmap_data(newgroupind,:) = cmap_i;
%             cmap_data(newgroupind,:) = ((ngrad-j)*ones(1,3) + j*cmap_i)/(ngrad);
            cmap_pred(newgroupind,:) = (1/2)*cmap_i + (1/2)*(((ngrad-j)*ones(1,3) + j*cmap_i)/ngrad);
        end
    end
    imglab = sprintf('PathologyBrainframe_Predicted_%s_t%d_%s',datset,tpts(k),ctdataset);
    input_struct_pred = brainframe_inputs_mouse(brainframedir,'data',datinput_k,...
                                                'voxUreg',1,...
                                                'xfac',xfac,...
                                                'pointsize',15,...
                                                'norm_method','max',...
                                                'bgcolor','w',...
                                                'img_format','tiffn',...
                                                'cmap',cmap_pred,...
                                                'region_groups',reggroups_pred,...
                                                'centered',[0 1],...
                                                'regsUbins',0,...
                                                'img_directory',figdirectory,...
                                                'img_labels',imglab,...
                                                'img_renderer','painters',...
                                                'savenclose',savenclose);
    brainframe(input_struct_pred);
end

%% 6.3 Top Hurtado cell types, glass brains
brainframedir = '/Users/justintorok/Documents/MATLAB/Brainframe-Dev/Brainframe';
addpath(brainframedir)
toptypes = {'L3 IT ENT','Sst','CT SUB','Oligo'}; % Highest t-stat in linear models
% toptypes = {'L2 IT ENTl', 'L2 IT ENTm', 'L2/3 IT ENTl'};
toptypeinds = find(ismember(subclasses,toptypes));
% [x,toptypeinds] = max(abs(rhurt),[],2);
% toptypes = subclasses(toptypeinds); % Highest correlation to pathology

plotting = 1;
savenclose = 0;
if length(subclasses) == 42
    if plotting
        nonneuronal_inds = ismember(subclasses,{'Endo','Astro','Oligo',...
            'Micro-PVM','SMC-Peri','VLMC'});
        gaba_inds = ismember(subclasses,{'Lamp5','Sncg','Meis2','CR',...
            'Pvalb','Sst','Sst Chodl','Vip'});
        glutctx_other_inds = ismember(subclasses,{'Car3','L4 RSP-ACA'});
        ctxtest = @(x) strcmp(x(end),'X');
        glutctx_inds = logical(cell2mat(cellfun(ctxtest,subclasses,'UniformOutput',false)));
        glutctx_inds = glutctx_inds + glutctx_other_inds;
        gluthipp_inds = ~logical(nonneuronal_inds + gaba_inds + glutctx_inds);
        indcell = {glutctx_inds,gluthipp_inds,gaba_inds,nonneuronal_inds};
        indtest = glutctx_inds + 2*gluthipp_inds + 3*gaba_inds + 4*nonneuronal_inds;
        cmap_col = [[0 0.75 1]; [1 0 0.5]];
        cmap = twocolor(cmap_col(1,:),cmap_col(2,:),length(indcell));
        voxthreshes = [0.6,0.6,0.6,0.6];
        
        for i = 1:length(toptypeinds)
            ctdata = outstruct.corrB(:,toptypeinds(i));
            newVoxMap = zeros(size(GENGDmod));
            newVoxMap(nonzerovox) = ctdata;
            datinput = imresize3(newVoxMap,[133 81 115]);
            datinput(datinput < 0) = 0;
            col_base = cmap(indtest(toptypeinds(i)),:);
            col_min = (col_base + 1)/2;
            nbin = 10;
            cmap_i = twocolor(col_min,col_base,nbin);
            labstr = ['Yao_' strrep(subclasses{toptypeinds(i)},' ','_')];
            labstr = strrep(labstr,'/','-');
            input_struct = brainframe_inputs_mouse(brainframedir,'data',datinput,...
                                                        'voxthresh',voxthreshes(i),...
                                                        'nbin',nbin,...
                                                        'voxUreg',0,...
                                                        'xfac',0.02,...
                                                        'pointsize',0.1,...
                                                        'bgcolor','w',...
                                                        'img_format','tiffn',...
                                                        'cmap',cmap_i,...
                                                        'regsUbins',0,...
                                                        'img_directory',figdirectory,...
                                                        'img_labels',labstr,...
                                                        'img_renderer','painters',...
                                                        'savenclose',savenclose);
            brainframe(input_struct);
        end
    end
else
    % % Finish later for Tasic/Zeisel     
    %     nonneuronal_inds = ismember(subclasses,{'Endo','Astro','Oligo',...
    %         'Macro'});
    %     gaba_inds = ismember(subclasses,{'Lamp5','Sncg','Meis2','CR',...
    %         'Pvalb','Sst','Serpinf1','Vip'});
    %     ctxtest = @(x) strcmp(x(end),'X');
    %     glutctx_inds = logical(cell2mat(cellfun(ctxtest,subclasses,'UniformOutput',false)));
    %     gluthipp_inds = ~logical(nonneuronal_inds + gaba_inds + glutctx_inds);
    %     indcell = {glutctx_inds,gluthipp_inds,gaba_inds,nonneuronal_inds};
    %     indtest = glutctx_inds + 2*gluthipp_inds + 3*gaba_inds + 4*nonneuronal_inds;
end

%% 7. Miscellaneous figures
%% 7.1 Plots for schematic
% tSNE
savenclose = 0;
usetSNE = 1;
genelist_schem = sort({'Sst','Pvalb','Rorb','Aqp4','Mapt','App','Apoe'});
ClusteringSchematic(usetSNE,savenclose,figdirectory);
GeneExpressionSchematic(genelist_schem,34,savenclose,datapath,figdirectory);