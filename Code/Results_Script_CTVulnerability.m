%% 0. Load data
clear; clc; rng(0);
matdir = '/Users/justintorok/Documents/MATLAB/CellTypeVulnerability_Project/CellTypeVulnerability/MatFiles';
addpath('/Users/justintorok/Documents/MATLAB/CellTypeVulnerability_Project/CellTypeVulnerability/Code/violin');
datapath = '/Users/justintorok/Documents/MATLAB/CellTypeVulnerability_Project/Large_MatFiles';
figdirectory = '/Users/justintorok/Documents/MATLAB/CellTypeVulnerability_Project/Figures/DraftFigs';
brainframedir = '/Users/justintorok/Documents/MATLAB/Brainframe-Dev/Brainframe';
addpath(brainframedir)

load([matdir filesep 'Mouse_Tauopathy_Data_HigherQ.mat'],'mousedata_struct');
datsetnames = fieldnames(mousedata_struct);
load([datapath filesep 'Yao_Dependencies.mat']);
load([matdir filesep 'AD_Genes.mat'],'genelist');
ctmat = outstruct.Bmeans;
subclasses = classkey;
ctdataset = 'Yao';

%% 1. Miscellaneous schematic-related figures
%% 1.1 Gene expression maps
savenclose = 0;
genelist_schem = sort({'Sst','Pvalb','Rorb','Aqp4','Mapt','App','Apoe'}); % could use others, simply for demonstration purposes
GeneExpressionSchematic(genelist_schem,34,savenclose,datapath,figdirectory);

%% 1.2 Clustergram for scRNAseq
genevct_mrx3 = genevct(geneinds(1:outstruct.nGen),:);
c = clustergram(genevct_mrx3,'Standardize','row','Colormap','redbluecmap');
cgfig = findall(0,'type','figure', 'Tag', 'Clustergram');
dendroAxRow = findall(cgfig,'Tag','DendroRowAxes');
dendroAxCol = findall(cgfig,'Tag','DendroColAxes');

set(dendroAxRow.Children, 'Visible', 'off')
set(dendroAxCol.Children,'LineWidth',2);
% manually save figure

%% 1.3 Interneuron scatterplot
savenclose = 1;
KimStudyComparison_Yao(outstruct,1,'neo',classkey,savenclose,matdir,figdirectory);

%% 1.4 Elbow curve plot
savenclose = 1;
outstruct_all = load([datapath filesep 'CellDensity_Yao2021_all.mat'],'outstruct');
outstruct_all = outstruct_all.outstruct;
ElbowSelector_MRx3(outstruct_all,1,savenclose,figdirectory);
clear outstruct_all

%% 1.5 Residual boxplot & glass brain
savenclose = 1;
ResidualViolinandGB(outstruct,1,genevct,voxvgene,listBmap,geneinds,brainframedir,savenclose,figdirectory);

%% 2. Univariate analysis, cell-type-based vulnerability
%% 2.1 Correlation box plots, cell types, end timepoint
plotting = 1;
savenclose = 0;
corrtype = 'Pearson';
t = 'end';
seedcorr = 1;
cmap = [[0 0.75 1]; [1 0 0.5]];
figtype = 'Yao';
 
[corrmat_t,logpmat_t] = CorrelationCalculator_singletimepoint(datsetnames,t,...
    mousedata_struct,ctmat,corrtype,seedcorr,matdir);
if plotting
    CorrelationBarPlot(corrmat_t,datsetnames,subclasses,corrtype,...
        cmap,figtype,savenclose,figdirectory);
%     PValuePlot(logpmat_t,datsetnames,subclasses,corrtype,...
%         copper(1000),cmap,savenclose,figdirectory);
%     [classes,classmeans,pvals1,pvals2] = ClassViolinPlot(corrmat_t,subclasses,corrtype,...
%         cmap,savenclose,figdirectory);
end

%% 2.2 Top 2 Cell Types, Brainframe 
% Requires the Brainframe repo: https://github.com/Raj-Lab-UCSF/Brainframe
brainframedir = '/Users/justintorok/Documents/MATLAB/Brainframe-Dev/Brainframe';
addpath(brainframedir)
corrmat_end_mean = mean(corrmat_t);
[~,maxind] = max(corrmat_end_mean);
[~,minind] = min(corrmat_end_mean);
toptypeinds = [maxind,minind];
% toptypeinds = find(ismember(subclasses,{'Car3','L4 RSP-ACA'}));

plotting = 1;
savenclose = 1;
if length(subclasses) == 42 % Yao
    if plotting
        % Define colormap based on cell class
        nonneuronal_inds = ismember(subclasses,{'Endo','Astro','Oligo',...
            'Micro-PVM','SMC-Peri','VLMC'});
        gaba_inds = ismember(subclasses,{'Lamp5','Sncg','Meis2','CR',...
            'Pvalb','Sst','Sst Chodl','Vip'});
        glutctx_other_inds = ismember(subclasses,{'Car3','L4 RSP-ACA'});
        ctxtest = @(x) strcmp(x(end),'X');
        glutctx_inds = logical(cell2mat(cellfun(ctxtest,subclasses,'UniformOutput',false)));
        glutctx_inds = glutctx_other_inds + glutctx_inds;
        gluthipp_inds = ~logical(nonneuronal_inds + gaba_inds + glutctx_inds);
        indcell = {glutctx_inds,gluthipp_inds,gaba_inds,nonneuronal_inds};
        indtest = glutctx_inds + 2*gluthipp_inds + 3*gaba_inds + 4*nonneuronal_inds;
        cmap_col = [[0 0.75 1]; [1 0 0.5]];
        cmap = twocolor(cmap_col(1,:),cmap_col(2,:),length(indcell));
        voxthreshes = 0.6*ones(1,length(toptypeinds)); % Brainframe parameter
        imgviews = [0 0 1];
        fun1 = @(x) strrep(x,'/','_');
        subclass_names = cellfun(fun1,subclasses,'UniformOutput',false);
        for i = 1:length(toptypeinds)
            ctdata = outstruct.corrB(:,toptypeinds(i));
            newVoxMap = zeros(size(GENGDmod));
            newVoxMap(nonzerovox) = ctdata;
            datinput = imresize3(newVoxMap,[133 81 115]);
            datinput(datinput < 0) = 0;
            col_base = cmap(indtest(toptypeinds(i)),:);
            col_min = (col_base + 1)/2;
            nbin = 10;
            cmap_i = twocolor(col_min,col_base,nbin);
            input_struct = brainframe_inputs_mouse(brainframedir,'data',datinput,...
                                                        'voxthresh',voxthreshes(i),...
                                                        'nbin',nbin,...
                                                        'voxUreg',0,...
                                                        'xfac',0.02,...
                                                        'pointsize',0.1,...
                                                        'bgcolor','w',...
                                                        'img_format','tiffn',...
                                                        'cmap',cmap_i,...
                                                        'regsUbins',0,...
                                                        'img_directory',figdirectory,...
                                                        'img_labels',['Yao_' subclass_names{toptypeinds(i)}],...
                                                        'img_renderer','painters',...
                                                        'img_views',imgviews,...
                                                        'savenclose',savenclose);
            brainframe(input_struct);
        end
    else
        % % Finish later for Tasic/Zeisel   
    end
end

%% 2.3 End-timepoint pathology glassbrains
savenclose = 0;
reggroups_ = zeros(213,1); %Chunk of code to define region_groups
amy = 1:11; cer = 12:23; sub = 24:26; hip = 27:37; hyp = 38:57;
ncx = 58:95; med = 96:120; mid = 121:141; olf = 142:149; pal = 150:157;
pon = 158:170; str = 171:178; tha = 179:213;
reggroups_(amy) = 1; reggroups_(cer) = 2; reggroups_(sub) = 3; 
reggroups_(hip) = 4; reggroups_(hyp) = 5; reggroups_(ncx) = 6;
reggroups_(med) = 7; reggroups_(mid) = 8; reggroups_(olf) = 9;
reggroups_(pal) = 10; reggroups_(pon) = 11; reggroups_(str) = 12;
reggroups_(tha) = 13;
reggroups_ = [reggroups_;reggroups_];
cmap_ = hsv(length(unique(reggroups_)));
ngrad = 3;

for k = 1:length(datsetnames)
    datset = datsetnames{i};
    datinput_data = DataToCCF([],datset,matdir);
    datinput_k = datinput_data(:,1);
    nany = isnan(datinput_k);
    datinput_k(nany) = 0;
    if ~strcmp(datset,'Hurtado')
        xfac = 0.3*(max(datinput_k)/max(datinput_data(~nany,1)))^(1/3);
    else     
        xfac = 0.15*(max(datinput_k)/max(datinput_data(~nany,1)))^(1/3);
    end
    reggroups_data = zeros(length(reggroups_),1);
    cmap_data = zeros(length(unique(reggroups_))*ngrad,3);
    for i = 1:length(unique(reggroups_))
        cmap_i = cmap_(i,:);
        reggroup_i_inds = (reggroups_ == i);
        for j = 1:ngrad
            newgroupind = (i-1)*ngrad + j;
            thresh_j = j*100/ngrad;
            zeroinds = (reggroups_data == 0);
            threshinds = (datinput_k <= prctile(nonzeros(datinput_k),thresh_j));
            ij_inds = (zeroinds + threshinds + reggroup_i_inds == 3);
            reggroups_data(ij_inds) = newgroupind;
            cmap_data(newgroupind,:) = (1/2)*cmap_i + (1/2)*(((ngrad-j)*ones(1,3) + j*cmap_i)/ngrad);
        end
    end
    imglab = sprintf('PathologyBrainframe_Data_%s_t%s_%s',datset,'end',ctdataset);
    input_struct_data = brainframe_inputs_mouse(brainframedir,'data',datinput_k,...
                                                'voxUreg',1,...
                                                'xfac',xfac,...
                                                'pointsize',5,...
                                                'norm_method','max',...
                                                'bgcolor','w',...
                                                'img_format','tiffn',...
                                                'cmap',cmap_data,...
                                                'region_groups',reggroups_data,...
                                                'centered',[0 1],...
                                                'img_directory',figdirectory,...
                                                'img_labels',imglab,...
                                                'img_renderer','painters',...
                                                'savenclose',savenclose);
    brainframe(input_struct_data);
end

%% 3. Gene-based vulnerability
%% 3.1 Gene expression distance from top cell types
% plotting = 1;
% savenclose = 0;
% genemat_allgenes = genevct_allgenes;
% genemat_MRx3 = genevct(sort(geneinds(1:outstruct.nGen)),:);
% ctmat = outstruct.Bmeans;
% corrtype = 'Pearson';
% mattype = {'MRx3','Spatial'};
% neuronly = 0;
% usewls = 0;
% usepos = 1;
% seedcorr = 1;
% t = 'end';
% corrmat_t = CorrelationCalculator_singletimepoint(datsetnames,t,...
%     mousedata_struct,ctmat,corrtype,seedcorr,matdir);
% cmap = [[0 0.75 1]; [1 0 0.5]];
% 
% if plotting
%     for i = 1:length(mattype)
%         [dist,tau,inds] = GeneExpressionDistance_vs_Tau_Plot(genemat_allgenes,...
%             genemat_MRx3,ctmat,mattype{i},subclasses,neuronly,corrmat_t,...
%             corrtype,cmap,usewls,usepos,savenclose,figdirectory);
%     end
% end

%% 3.2 Spectral eigenvector vs. vulnerability plot
plotting = 1;
savenclose = 0;
genemat_MRx3 = genevct(sort(geneinds(1:outstruct.nGen)),:);
ctmat = outstruct.Bmeans;
corrtype = 'Pearson';
mattype = {'MRx3','Spatial'};
vtypes = [1,0];
neuronly = 0;
usewls = 0;
seedcorr = 1;
t = 'end';
corrmat_t = CorrelationCalculator_singletimepoint(datsetnames,t,...
    mousedata_struct,ctmat,corrtype,seedcorr,matdir);
cmap = [[0 0.75 1]; [1 0 0.5]];

if plotting
    for i = 1:length(mattype)
        for j = 1:length(vtypes)
            SpectralEigenvector_vs_Tau_Plot(genemat_MRx3,ctmat,mattype{i},...
                vtypes(j),subclasses,neuronly,corrmat_t,...
                corrtype,cmap,usewls,savenclose,figdirectory);
        end
    end
end

%% 3.3 Spectral embedding plot
plotting = 1;
mattype = {'MRx3','Spatial'};
genemat_MRx3 = genevct(sort(geneinds(1:outstruct.nGen)),:);
ctmat = outstruct.Bmeans;
if plotting
    for i = 1:length(mattype)
        [v2,v3] = EigenAnalysisPlot(corrmat_t,genemat_MRx3,ctmat,subclasses,mattype{i},...
            0,figdirectory);
    end
end
% Note - requires hand-tweaking labels before saving:
% print([figdirectory filesep 'EigenAnalysisPlot_' mattype{1}],'-dtiffn','-r600'); 
% print([figdirectory filesep 'EigenAnalysisPlot_' mattype{2}],'-dtiffn','-r600'); close;

%% 3.4 Vulnerability from common AD genes
corrtype = 'Pearson';
seedcorr = 1;
% genelist = sort([genelist, 'Bsn']); % add Bsn as a test
t = 'end';
genelist_inds = zeros(1,length(genelist));
for i = 1:length(genelist_inds)
    genelist_inds(i) = find(ismember(gene_names,genelist{i}));
end
genemat_list = voxvgene(:,genelist_inds);
[~,genemat_list] = Voxel_To_Region(genemat_list,matdir);
corrmat_t_gene = CorrelationCalculator_singletimepoint(datsetnames,t,...
    mousedata_struct,genemat_list,corrtype,seedcorr,matdir);

plotting = 1;
savenclose = 0;
cmap = [[1 0 0]; [1 0.75 0]];
figtype = 'AD_Genes';
if plotting
    CorrelationBarPlot(corrmat_t_gene,datsetnames,genelist,corrtype,...
        cmap,figtype,savenclose,figdirectory);
end

%% 3.5 Gene expression glass brains
toptypes = genelist;
toptypeinds = find(ismember(genelist,toptypes));
% [x,toptypeinds] = max(abs(rhurt),[],2);
cmap = twocolor([1 0 0], [1 0.75 0],length(genelist));

plotting = 1;
savenclose = 1;
if plotting
    for i = 1:length(toptypeinds)
        ctdata = genemat_list(:,toptypeinds(i));
        newVoxMap = zeros(size(GENGDmod));
        newVoxMap(nonzerovox) = ctdata;
        datinput = imresize3(newVoxMap,[133 81 115]);
        datinput(datinput < 0) = 0;
        col_base = cmap(toptypeinds(i),:);
        col_min = (col_base + 1)/2;
        nbin = 10;
        cmap_i = twocolor(col_min,col_base,nbin);
        labstr = strrep(genelist{toptypeinds(i)},' ','_');
        labstr = strrep(labstr,'/','-');
        input_struct = brainframe_inputs_mouse(brainframedir,'data',datinput,...
                                                    'voxthresh',0.7,...
                                                    'nbin',nbin,...
                                                    'voxUreg',0,...
                                                    'xfac',0.02,...
                                                    'pointsize',0.1,...
                                                    'bgcolor','w',...
                                                    'img_format','tiffn',...
                                                    'cmap',cmap_i,...
                                                    'regsUbins',0,...
                                                    'img_directory',figdirectory,...
                                                    'img_labels',labstr,...
                                                    'img_renderer','painters',...
                                                    'savenclose',savenclose);
        brainframe(input_struct);
    end
end

%% 3.5.1 Correlation box plots, pairwise analysis, Micro x Astro
% plotting = 1;
% savenclose = 0;
% corrtype = 'Pearson';
% t = 'end';
% seedcorr = 1;
% 
% name1 = 'Astro';
% name2 = 'Micro-PVM';
% indiv_vec1 = outstruct.Bmeans(:,ismember(subclasses,name1));
% indiv_vec1 = indiv_vec1 / max(indiv_vec1);
% indiv_vec2 = outstruct.Bmeans(:,ismember(subclasses,name2));
% indiv_vec2 = indiv_vec2 / max(indiv_vec2);
% pair_vec1 = indiv_vec1 + indiv_vec2; 
% pair_vec2 = (1 - indiv_vec1) .* indiv_vec2;
% ctmat_pairwise = [indiv_vec1, indiv_vec2, pair_vec1, pair_vec2];
% cmap = [[0 1 0]; [0 0 1]];
% corrmat_t_pairwise = CorrelationCalculator_singletimepoint(datsetnames,t,...
%     mousedata_struct,ctmat_pairwise,corrtype,seedcorr,matdir);
% 
% subclasses_pairwise = {name1, name2, [name1 ' + ' name2], ['(1 - ' name1 ') * ' name2]};
% figtype = ['Pairwise_' name1 '_' name2];
% if plotting
%     CorrelationBarPlot_Pairwise(corrmat_t_pairwise,datsetnames,subclasses_pairwise,corrtype,...
%         cmap,figtype,savenclose,figdirectory);
% end

%% 3.5.2 Correlation box plots, pairwise analysis, Oligo x Apoe
% plotting = 1;
% savenclose = 0;
% corrtype = 'Pearson';
% t = 'end';
% seedcorr = 1;
% 
% name1 = 'Oligo';
% name2 = 'Apoe';
% indiv_vec1 = outstruct.Bmeans(:,ismember(subclasses,name1));
% indiv_vec1 = indiv_vec1 / max(indiv_vec1);
% genemat_list = voxvgene(:,ismember(gene_names,name2));
% [~,indiv_vec2] = Voxel_To_Region(genemat_list,matdir);
% indiv_vec2 = indiv_vec2 / max(indiv_vec2);
% pair_vec1 = indiv_vec1 + indiv_vec2; 
% pair_vec2 = indiv_vec1 .* (1 - indiv_vec2);
% ctmat_pairwise = [indiv_vec1, indiv_vec2, pair_vec1, pair_vec2];
% cmap = [[0 1 0]; [0 0 1]];
% corrmat_t_pairwise = CorrelationCalculator_singletimepoint(datsetnames,t,...
%     mousedata_struct,ctmat_pairwise,corrtype,seedcorr,matdir);
% 
% name2_plot = ['{\it ' name2 '}'];
% subclasses_pairwise = {name1, name2_plot, [name1 ' +' name2_plot], [name1 ' * (1 - ' name2_plot ')']};
% figtype = ['Pairwise_' name1 '_' name2];
% if plotting
%     CorrelationBarPlot_Pairwise(corrmat_t_pairwise,datsetnames,subclasses_pairwise,corrtype,...
%         cmap,figtype,savenclose,figdirectory);
% end

%% 3.5.3 Correlation box plots, pairwise analysis, Micro x Trem2
% plotting = 1;
% savenclose = 0;
% corrtype = 'Pearson';
% t = 'end';
% seedcorr = 1;
% 
% name1 = 'Micro-PVM';
% name2 = 'Trem2';
% indiv_vec1 = outstruct.Bmeans(:,ismember(subclasses,name1));
% genemat_list = voxvgene(:,ismember(gene_names,name2));
% [~,indiv_vec2] = Voxel_To_Region(genemat_list,matdir);
% pair_vec1 = indiv_vec1 + indiv_vec2; 
% pair_vec2 = indiv_vec1 .* indiv_vec2;
% ctmat_pairwise = [indiv_vec1, indiv_vec2, pair_vec1, pair_vec2];
% cmap = [[0 1 0]; [0 0 1]];
% corrmat_t_pairwise = CorrelationCalculator_singletimepoint(datsetnames,t,...
%     mousedata_struct,ctmat_pairwise,corrtype,seedcorr,matdir);
% 
% name2_plot = ['{\it ' name2 '}'];
% subclasses_pairwise = {name1, name2_plot, [name1 ' +' name2_plot], [name1 ' *' name2_plot]};
% figtype = ['Pairwise_' name1 '_' name2];
% if plotting
%     CorrelationBarPlot_Pairwise(corrmat_t_pairwise,datsetnames,subclasses_pairwise,corrtype,...
%         cmap,figtype,savenclose,figdirectory);
% end

%% 4. Internal structure of data
%% 4.1 Cross-correlation matrices with hierarchical clustering
plotting = 1;
savenclose = 1;
corrtype = 'MRx3';
clusttype = 'MRx3';
linktype = 'ward';
disttype = 'euclidean';
uselab = 1;
genemat_allgenes = genevct_allgenes;
genemat_MRx3 = genevct(sort(geneinds(1:outstruct.nGen)),:);
ctmat = outstruct.Bmeans;
cmap_label = [[0 0.75 1]; [1 0 0.5]];
cmap = [];

if plotting
    ClusteringHeatmap(genemat_allgenes,genemat_MRx3,ctmat,subclasses,...
        ctdataset,corrtype,clusttype,cmap,cmap_label,disttype,linktype,...
        uselab,savenclose,figdirectory);
end

%% 4.2 Cross-correlation matrices of data
plotting = 1;
savenclose = 1;
seedcorr = 1;
cmap = [[ones(500,1), 0.9*linspace(1,0.5,500).', 0.9*linspace(1,0,500).'];...
                    [ones(500,1), linspace(0.5,0,500).', 0*ones(500,1)]].^(1/2);

if plotting
    TauPathologyHeatmap(datsetnames,mousedata_struct,cmap,seedcorr,savenclose,figdirectory);
end

%% 5. Multivariate analyses
%% 5.1 Linear models and frequency bar plots, cell types
plotting = 1;
bicplotting = 1;
savenclose = 0;
usebic = 1;
numsigtypes = 5;
thresh = 75;
ctdataset = 'Yao';
corrtype = 'Pearson';
seedcorr = 1;
ctmat = outstruct.Bmeans;
t = 'end';
 
[mdls_bic,subclasses_bic,coeff_vals_bic,pvals_bic_vars] = ...
    LinearModelSelection_BIC_alldatasets(datsetnames,t,mousedata_struct,...
    ctmat,subclasses,corrtype,seedcorr,usebic,thresh,ctdataset,bicplotting,plotting,[],...
    savenclose,figdirectory,matdir);
[mdls_topN,subclasses_topN,coeff_vals_topN,pvals_bic_topN] = LinearModelSelection_TopN_alldatasets(datsetnames,t,...
    mousedata_struct,ctmat,subclasses,numsigtypes,corrtype,seedcorr,ctdataset,plotting,...
    [],savenclose,figdirectory,matdir);
CellTypeFrequencyPlot(subclasses,subclasses_bic,t,ctdataset,'BIC',[[0 0.75 1]; [1 0 0.5]],...
    savenclose,figdirectory);
CellTypeFrequencyPlot(subclasses,subclasses_topN,t,ctdataset,'TopN',[[0 0.75 1]; [1 0 0.5]],...
    savenclose,figdirectory);

%% 5.2 Linear models, AD genes
plotting = 1;
bicplotting = 1;
savenclose = 0;
ctdataset = 'Gene';
corrtype = 'Pearson';
seedcorr = 1;
usebic = 1;
thresh = 50;
numsigtypes = 5;
load([matdir filesep 'AD_Genes.mat'],'genelist');
genelist = sort([genelist, 'Bsn']);
t = 'end';

genelist_inds = zeros(1,length(genelist));
for i = 1:length(genelist_inds)
    genelist_inds(i) = find(ismember(gene_names,genelist{i}));
end
genemat_list = voxvgene(:,genelist_inds);
[~,genemat_list] = Voxel_To_Region(genemat_list,matdir);

% [mdls_all_gene,subclasses_all_gene] = LinearModelSelection_BIC_alldatasets(datsetnames,t,...
%     mousedata_struct,genemat_list,genelist,length(genelist),corrtype,seedcorr,ctdataset,plotting,...
%     [],savenclose,figdirectory,matdir);
[mdls_bic_gene,subclasses_bic_gene,coeff_vals_gene,pvals_bic_gene] = ...
    LinearModelSelection_BIC_alldatasets(datsetnames,t,mousedata_struct,...
    genemat_list,subclasses,corrtype,seedcorr,usebic,thresh,ctdataset,bicplotting,plotting,[],...
    savenclose,figdirectory,matdir); 
[mdls_topN_gene,subclasses_topN_gene,coeff_vals_topN_gene,pvals_bic_topN_gene] = ...
    LinearModelSelection_TopN_alldatasets(datsetnames,t,...
    mousedata_struct,genemat_list,subclasses,numsigtypes,corrtype,seedcorr,ctdataset,plotting,...
    [],savenclose,figdirectory,matdir);

%% 5.3 Vulnerability/Resilience Gene Analysis
meancorrs = mean(corrmat_t);
signcorrs = sign(meancorrs).'; 
subclasses_bic_sel = {};
for i = 1:length(datsetnames)
    subclasses_bic_i = subclasses_bic{i};
    for j = 1:length(subclasses_bic_i)
        subclasses_bic_sel = [subclasses_bic_sel, subclasses_bic_i{j}];
    end
end
subclasses_bic_sel = unique(subclasses_bic_sel);
sel_bic_inds = ismember(subclasses,subclasses_bic_sel);
vuln_bic_inds = (sel_bic_inds + (signcorrs == 1)) == 2;
res_bic_inds = (sel_bic_inds + (signcorrs == -1)) == 2;
subclasses_bic_vuln = subclasses(vuln_bic_inds);
subclasses_bic_res = subclasses(res_bic_inds);

ctmean_col = mean(genevct);
ctnorm_col = genevct ./ repmat(ctmean_col,size(genevct,1),1); 
ctvuln_col = ctnorm_col(:,vuln_bic_inds); ctres_col = ctnorm_col(:,res_bic_inds);
ctvuln_mean = mean(ctvuln_col,2); ctres_mean = mean(ctres_col,2);
ctvuln_std = std(ctvuln_col,[],2); ctres_std = std(ctvuln_col,[],2);
[~,vulngeneorder] = sort(ctvuln_mean,'descend');
[~,resgeneorder] = sort(ctres_mean,'descend');
vulngenes = gene_names(vulngeneorder); resgenes = gene_names(resgeneorder);
advulngenerank = NaN(1,length(genelist)); adresgenerank = advulngenerank;
for i = 1:length(advulngenerank)
    advulngenerank(i) = find(ismember(vulngenes,genelist{i}));
    adresgenerank(i) = find(ismember(resgenes,genelist{i}));
end
advulnprctile = 1 - advulngenerank/size(ctnorm_col,1);
adresprctile = 1 - adresgenerank/size(ctnorm_col,1);
y = [advulnprctile.', adresprctile.'];

adgeneinds = ismember(gene_names,genelist);
ctvuln_col = ctvuln_col(adgeneinds,:); ctres_col = ctres_col(adgeneinds,:);
ctvuln_mean = mean(ctvuln_col,2); ctres_mean = mean(ctres_col,2);
ctvuln_std = std(ctvuln_col,[],2); ctres_std = std(ctres_col,[],2);
ctvulnres_mean = 1;
% ctvulnres_mean = ctvuln_mean + ctres_mean;
ctvuln_mean_norm = ctvuln_mean ./ ctvulnres_mean; ctvuln_std_norm = ctvuln_std ./ ctvulnres_mean;
ctres_mean_norm = ctres_mean ./ ctvulnres_mean; ctres_std_norm = ctres_std ./ ctvulnres_mean;
z_mean = [ctvuln_mean_norm, ctres_mean_norm]; z_std = [ctvuln_std_norm, ctres_std_norm];
% z_mean = z_mean(adgeneinds,:); z_std = z_std(adgeneinds,:);
% z1 = z_mean - z_std; z1 = reshape(z1.',size(z1,1)*2,1);
% z2 = z_mean + z_std; z2 = reshape(z2.',size(z2,1)*2,1); 

figure('Position',[0 0 2000 2000]);
bar(y); xticks(1:length(genelist)); xticklabels(genelist); ylabel('Gene Expression Percentile'); 
legend({sprintf('Vulnerable Types BIC'),sprintf('Resilient Types BIC')});
% legend({sprintf('Top %d Vulnerable Types',5),sprintf('Top %d Resilient Types',3)});
set(gca,'FontSize',20,'FontName','Times')

figure('Position',[0 0 2000 2000]);
bar(z_mean); xticks(1:length(genelist)); xticklabels(genelist); ylabel('Normalized Mean Gene Expression'); 
legend({sprintf('Vulnerable Types BIC'),sprintf('Resilient Types BIC')});
% legend({sprintf('Top %d Vulnerable Types',5),sprintf('Top %d Resilient Types',3)});
set(gca,'FontSize',20,'FontName','Times')
% hold on
% er = errorbar(1:length(z1),z_mean,z1,z2);    
% er.Color = [0 0 0];                            
% er.LineStyle = 'none';  


% 
% meancorrs = mean(corrmat_t);
% signcorrs = sign(meancorrs).'; 
% subclasses_topN_sel = {};
% for i = 1:length(datsetnames)
%     subclasses_topN_i = subclasses_topN{i};
%     for j = 1:length(subclasses_topN_i)
%         subclasses_topN_sel = [subclasses_topN_sel, subclasses_topN_i{j}];
%     end
% end
% subclasses_topN_sel = unique(subclasses_topN_sel);
% sel_topN_inds = ismember(subclasses,subclasses_topN_sel);
% vuln_topN_inds = (sel_topN_inds + (signcorrs == 1)) == 2;
% res_topN_inds = (sel_topN_inds + (signcorrs == -1)) == 2;
% subclasses_topN_vuln = subclasses(vuln_topN_inds);
% subclasses_topN_res = subclasses(res_topN_inds);
% 
% ctmean_col = mean(genevct);
% ctnorm_col = genevct ./ repmat(ctmean_col,size(genevct,1),1); 
% ctvuln_col = ctnorm_col(:,vuln_topN_inds); ctres_col = ctnorm_col(:,res_topN_inds);
% 
% ctvuln_mean = mean(ctvuln_col,2); ctres_mean = mean(ctres_col,2);
% [~,vulngeneorder] = sort(ctvuln_mean,'descend');
% [~,resgeneorder] = sort(ctres_mean,'descend');
% vulngenes = gene_names(vulngeneorder); resgenes = gene_names(resgeneorder);
% advulngenerank = NaN(1,length(genelist)); adresgenerank = advulngenerank;
% for i = 1:length(advulngenerank)
%     advulngenerank(i) = find(ismember(vulngenes,genelist{i}));
%     adresgenerank(i) = find(ismember(resgenes,genelist{i}));
% end
% 
% advulnprctile = 1 - advulngenerank/size(ctnorm_col,1);
% adresprctile = 1 - adresgenerank/size(ctnorm_col,1);
% y = [advulnprctile.', adresprctile.'];
% figure('Position',[0 0 2000 2000]);
% bar(y); xticks(1:length(genelist)); xticklabels(genelist); ylabel('Gene Expression Percentile');
% % hold on
% % er = errorbar(x,data,errlow,errhigh);    
% % er.Color = [0 0 0];                            
% % er.LineStyle = 'none';  
% legend({sprintf('Vulnerable Types Top 5'),sprintf('Resilient Types Top 5')});
% % legend({sprintf('Top %d Vulnerable Types',5),sprintf('Top %d Resilient Types',3)});
% set(gca,'FontSize',20,'FontName','Times')



% subclasses_topN_sel = unique(subclasses_topN);
% sel_topN_inds = ismember(subclasses,subclasses_topN_sel);

% ctmean = mean(genevct);
% ctnorm = genevct ./ repmat(ctmean,size(genevct,1),1); 
% numtypes = 4;
% [~,vulninds] = sort(meancorrs,'descend'); vulninds = vulninds(1:numtypes);
% [~,resinds] = sort(meancorrs); resinds = resinds(1:numtypes);
% vulntypes = subclasses(vulninds); restypes = subclasses(resinds);
% ctvuln = ctnorm(:,vulninds); ctres = ctnorm(:,resinds);
% ctvuln_mean = mean(ctvuln,2); ctres_mean = mean(ctres,2);
% [~,vulngeneorder] = sort(ctvuln_mean,'descend');
% [~,resgeneorder] = sort(ctres_mean,'descend');
% vulngenes = gene_names(vulngeneorder); resgenes = gene_names(resgeneorder);
% advulngenerank = NaN(1,length(genelist)); adresgenerank = advulngenerank;
% for i = 1:length(advulngenerank)
%     advulngenerank(i) = find(ismember(vulngenes,genelist{i}));
%     adresgenerank(i) = find(ismember(resgenes,genelist{i}));
% end
% 
% advulnprctile = 1 - advulngenerank/size(ctnorm,1);
% adresprctile = 1 - adresgenerank/size(ctnorm,1);
% y = [advulnprctile.', adresprctile.'];

%% 5.4 Vulnerability/Resilience Gene Identification
thresh = 90;
N = 10000;
plotting = 1;
savenclose = 1;
degenes = DEVulnGeneIdentifier(corrmat_t,subclasses_bic,subclasses,...
                            genevct,corrmat_t_gene,gene_names,thresh);
if plotting == 1
    GeneOverlapPlot(degenes,N,savenclose,figdirectory);
end

%% 6.1 Hurtado per-timepoint
plotting = 1;
bicplotting = 1;
savenclose = 0;
usebic = 1;
ctdataset = 'Yao';
corrtype = 'Pearson';
seedcorr = 1;
datset = 'Hurtado';
ctmat = outstruct.Bmeans;
cmap = twocolor([0,1,0.25],[0.5,0,1],length(mousedata_struct.(datset).time_stamps));

[mdls_bic_hurtado,subclasses_bic_hurtado,xcti,Y,rhurt] = LinearModelSelection_BIC_alltpts(...
    datset,mousedata_struct,ctmat,subclasses,corrtype,seedcorr,usebic,ctdataset,...
    bicplotting,plotting,cmap,savenclose,figdirectory,matdir);

%% 6.2 Hurtado pathology glass-brains, space-filling
brainframedir = '/Users/justintorok/Documents/MATLAB/Brainframe-Dev/Brainframe';
addpath(brainframedir)
datset = 'Hurtado';
tpts = mousedata_struct.(datset).time_stamps;
savenclose = 1;
reggroups_ = zeros(213,1); %Chunk of code to define region_groups
amy = 1:11; cer = 12:23; sub = 24:26; hip = 27:37; hyp = 38:57;
ncx = 58:95; med = 96:120; mid = 121:141; olf = 142:149; pal = 150:157;
pon = 158:170; str = 171:178; tha = 179:213;
reggroups_(amy) = 1; reggroups_(cer) = 2; reggroups_(sub) = 3; 
reggroups_(hip) = 4; reggroups_(hyp) = 5; reggroups_(ncx) = 6;
reggroups_(med) = 7; reggroups_(mid) = 8; reggroups_(olf) = 9;
reggroups_(pal) = 10; reggroups_(pon) = 11; reggroups_(str) = 12;
reggroups_(tha) = 13;
% fore = [amy,sub,hip,olf,pal,str];
% dimes = [hyp,mid,tha];
% hind = [cer,med,pon];
% 
% reggroups_(ncx) = 1;
% reggroups_(fore) = 2;
% reggroups_(dimes) = 3;
% reggroups_(hind) = 4;
reggroups_ = [reggroups_;reggroups_];
% cmap_ = [[1 0 0]; [0 0 1]; [1 0 1]; [1 0.5 0]];
cmap_ = hsv(length(unique(reggroups_)));
ngrad = 3;

datinput_data = DataToCCF([],datset,matdir);
datinput_pred = zeros(size(datinput_data));
for i = 1:size(datinput_pred,2)
    mdlpred = mdls_bic_hurtado{i}.Fitted;
    mdlpred(mdlpred < 0) = 0;
    datinput_pred(:,i) = DataToCCF(mdlpred,datset,matdir);
end

for k = 1:size(datinput_data,2)
    datinput_k = datinput_data(:,k);
    nany = isnan(datinput_k);
    datinput_k(nany) = 0;
    xfac = 0.15*(max(datinput_k)/max(datinput_data(~nany,1)))^(1/3);
    reggroups_data = zeros(length(reggroups_),1);
    cmap_data = zeros(length(unique(reggroups_))*ngrad,3);
    for i = 1:length(unique(reggroups_))
        cmap_i = cmap_(i,:);
        reggroup_i_inds = (reggroups_ == i);
        for j = 1:ngrad
            newgroupind = (i-1)*ngrad + j;
            thresh_j = j*100/ngrad;
            zeroinds = (reggroups_data == 0);
            threshinds = (datinput_k <= prctile(nonzeros(datinput_k),thresh_j));
            ij_inds = (zeroinds + threshinds + reggroup_i_inds == 3);
            reggroups_data(ij_inds) = newgroupind;
%             cmap_data(newgroupind,:) = cmap_i;
%             cmap_data(newgroupind,:) = ((ngrad-j)*ones(1,3) + j*cmap_i)/(ngrad);
            cmap_data(newgroupind,:) = (1/2)*cmap_i + (1/2)*(((ngrad-j)*ones(1,3) + j*cmap_i)/ngrad);
        end
    end
    imglab = sprintf('PathologyBrainframe_Data_%s_t%d_%s',datset,tpts(k),ctdataset);
    input_struct_data = brainframe_inputs_mouse(brainframedir,'data',datinput_k,...
                                                'voxUreg',1,...
                                                'xfac',xfac,...
                                                'pointsize',5,...
                                                'norm_method','max',...
                                                'bgcolor','w',...
                                                'img_format','tiffn',...
                                                'cmap',cmap_data,...
                                                'region_groups',reggroups_data,...
                                                'centered',[0 1],...
                                                'img_directory',figdirectory,...
                                                'img_labels',imglab,...
                                                'img_renderer','painters',...
                                                'savenclose',savenclose);
    brainframe(input_struct_data);

    datinput_k = datinput_pred(:,k);
    nany = isnan(datinput_k);
    datinput_k(nany) = 0;
    xfac = 0.15*(max(datinput_k)/max(datinput_pred(~nany,1)))^(1/3);
    reggroups_pred = zeros(length(reggroups_),1);
    cmap_pred = zeros(length(unique(reggroups_))*ngrad,3);
    for i = 1:length(unique(reggroups_))
        cmap_i = cmap_(i,:);
        reggroup_i_inds = (reggroups_ == i);
        for j = 1:ngrad
            newgroupind = (i-1)*ngrad + j;
            thresh_j = j*100/ngrad;
            zeroinds = (reggroups_pred == 0);
            threshinds = (datinput_k <= prctile(nonzeros(datinput_k),thresh_j));
            ij_inds = (zeroinds + threshinds + reggroup_i_inds == 3);
            reggroups_pred(ij_inds) = newgroupind;
%             cmap_data(newgroupind,:) = cmap_i;
%             cmap_data(newgroupind,:) = ((ngrad-j)*ones(1,3) + j*cmap_i)/(ngrad);
            cmap_pred(newgroupind,:) = (1/2)*cmap_i + (1/2)*(((ngrad-j)*ones(1,3) + j*cmap_i)/ngrad);
        end
    end
    imglab = sprintf('PathologyBrainframe_Predicted_%s_t%d_%s',datset,tpts(k),ctdataset);
    input_struct_pred = brainframe_inputs_mouse(brainframedir,'data',datinput_k,...
                                                'voxUreg',1,...
                                                'xfac',xfac,...
                                                'pointsize',15,...
                                                'norm_method','max',...
                                                'bgcolor','w',...
                                                'img_format','tiffn',...
                                                'cmap',cmap_pred,...
                                                'region_groups',reggroups_pred,...
                                                'centered',[0 1],...
                                                'regsUbins',0,...
                                                'img_directory',figdirectory,...
                                                'img_labels',imglab,...
                                                'img_renderer','painters',...
                                                'savenclose',savenclose);
    brainframe(input_struct_pred);
end

%% 6.3 Top Hurtado cell types, glass brains
brainframedir = '/Users/justintorok/Documents/MATLAB/Brainframe-Dev/Brainframe';
addpath(brainframedir)
toptypes = {'L3 IT ENT','Sst','CT SUB','Oligo'}; % Highest t-stat in linear models
% toptypes = {'L2 IT ENTl', 'L2 IT ENTm', 'L2/3 IT ENTl'};
toptypeinds = find(ismember(subclasses,toptypes));
% [x,toptypeinds] = max(abs(rhurt),[],2);
% toptypes = subclasses(toptypeinds); % Highest correlation to pathology

plotting = 1;
savenclose = 0;
if length(subclasses) == 42
    if plotting
        nonneuronal_inds = ismember(subclasses,{'Endo','Astro','Oligo',...
            'Micro-PVM','SMC-Peri','VLMC'});
        gaba_inds = ismember(subclasses,{'Lamp5','Sncg','Meis2','CR',...
            'Pvalb','Sst','Sst Chodl','Vip'});
        glutctx_other_inds = ismember(subclasses,{'Car3','L4 RSP-ACA'});
        ctxtest = @(x) strcmp(x(end),'X');
        glutctx_inds = logical(cell2mat(cellfun(ctxtest,subclasses,'UniformOutput',false)));
        glutctx_inds = glutctx_inds + glutctx_other_inds;
        gluthipp_inds = ~logical(nonneuronal_inds + gaba_inds + glutctx_inds);
        indcell = {glutctx_inds,gluthipp_inds,gaba_inds,nonneuronal_inds};
        indtest = glutctx_inds + 2*gluthipp_inds + 3*gaba_inds + 4*nonneuronal_inds;
        cmap_col = [[0 0.75 1]; [1 0 0.5]];
        cmap = twocolor(cmap_col(1,:),cmap_col(2,:),length(indcell));
        voxthreshes = [0.6,0.6,0.6,0.6];
        
        for i = 1:length(toptypeinds)
            ctdata = outstruct.corrB(:,toptypeinds(i));
            newVoxMap = zeros(size(GENGDmod));
            newVoxMap(nonzerovox) = ctdata;
            datinput = imresize3(newVoxMap,[133 81 115]);
            datinput(datinput < 0) = 0;
            col_base = cmap(indtest(toptypeinds(i)),:);
            col_min = (col_base + 1)/2;
            nbin = 10;
            cmap_i = twocolor(col_min,col_base,nbin);
            labstr = ['Yao_' strrep(subclasses{toptypeinds(i)},' ','_')];
            labstr = strrep(labstr,'/','-');
            input_struct = brainframe_inputs_mouse(brainframedir,'data',datinput,...
                                                        'voxthresh',voxthreshes(i),...
                                                        'nbin',nbin,...
                                                        'voxUreg',0,...
                                                        'xfac',0.02,...
                                                        'pointsize',0.1,...
                                                        'bgcolor','w',...
                                                        'img_format','tiffn',...
                                                        'cmap',cmap_i,...
                                                        'regsUbins',0,...
                                                        'img_directory',figdirectory,...
                                                        'img_labels',labstr,...
                                                        'img_renderer','painters',...
                                                        'savenclose',savenclose);
            brainframe(input_struct);
        end
    end
else
    % % Finish later for Tasic/Zeisel     
    %     nonneuronal_inds = ismember(subclasses,{'Endo','Astro','Oligo',...
    %         'Macro'});
    %     gaba_inds = ismember(subclasses,{'Lamp5','Sncg','Meis2','CR',...
    %         'Pvalb','Sst','Serpinf1','Vip'});
    %     ctxtest = @(x) strcmp(x(end),'X');
    %     glutctx_inds = logical(cell2mat(cellfun(ctxtest,subclasses,'UniformOutput',false)));
    %     gluthipp_inds = ~logical(nonneuronal_inds + gaba_inds + glutctx_inds);
    %     indcell = {glutctx_inds,gluthipp_inds,gaba_inds,nonneuronal_inds};
    %     indtest = glutctx_inds + 2*gluthipp_inds + 3*gaba_inds + 4*nonneuronal_inds;
end

% %% 3.2.1 Spatial eigenanalysis 
% % genemat_allgenes = genevct_allgenes;
% rng('default');
% clc
% nonneuronal_inds = ismember(subclasses,{'Endo','Astro','Oligo',...
%     'Micro-PVM','SMC-Peri','VLMC'});
% gaba_inds = ismember(subclasses,{'Lamp5','Sncg','Meis2','CR',...
%     'Pvalb','Sst','Sst Chodl','Vip'});
% ctxtest = @(x) strcmp(x(end),'X');
% glutctx_inds = logical(cell2mat(cellfun(ctxtest,subclasses,'UniformOutput',false)));
% gluthipp_inds = ~logical(nonneuronal_inds + gaba_inds + glutctx_inds);
% indcell = {glutctx_inds,gluthipp_inds,gaba_inds,nonneuronal_inds};
% indtest = glutctx_inds + 2*gluthipp_inds + 3*gaba_inds + 4*nonneuronal_inds;
% cmap_col = [[0 0.75 1]; [1 0 0.5]];
% cmap_base = twocolor(cmap_col(1,:),cmap_col(2,:),length(indcell));
% cmap_text = zeros(length(indtest),3);
% for i = 1:length(unique(indtest))
%     cmap_text(indtest == i,:) = repmat(cmap_base(i,:),sum(indtest==i),1);
% end
% 
% ctmat = outstruct.Bmeans; 
% ctmat = ctmat / max(ctmat(:));
% D_spatial = squareform(pdist(ctmat.','correlation'));
% % S_spatial = max(D_spatial(:)) - D_spatial;
% % S_spatial = 1./D_spatial; 
% S_spatial = exp(1).^(-D_spatial.^2);
% S_spatial(logical(eye(size(S_spatial)))) = 0;
% S_spatial = (S_spatial - min(S_spatial(:)))/...
%     (max(S_spatial(:))-min(S_spatial(:)));
% nodesign = sign(mean(corrmat_t).');
% cmapidx = (nodesign + 3)/2;
% cmap_all = NaN(length(nodesign),3);
% cmap = [[0 0 1]; [1 0 0]];
% for i = 1:size(cmap,1)
%     inds = cmapidx == i;
%     cmap_all(inds,:) = repmat(cmap(i,:),sum(inds),1);
% end
% markersizes = 2000*(abs(mean(corrmat_t).')).^(0.5);
% % [~,V_sc] = spectralcluster(S_spatial,3,'Distance','precomputed');
% L_spat = diag(sum(S_spatial)) - S_spatial;
% % L_sc = eye(size(S_spatial)) - diag(sum(S_spatial))^(-1)*S_spatial;
% [V_spat,~] = eig(L_spat);
% [~,V_pca] = pca(ctmat.');
% 
% figure('Units','inches','Position',[0 0 25,8]); 
% subplot(1,2,1); hold on;
% for i = 1:length(unique(indtest))
%     inds = indtest==i;
%     h = scatter3(V_spat(inds,2),V_spat(inds,3),V_spat(inds,4),markersizes(inds),cmap_all(inds,:),'filled',...
%         'MarkerEdgeColor',cmap_base(i,:),'LineWidth',3);
%     h.MarkerFaceAlpha = 0.5;
% end
% % dx = 0; dy = 0.02;
% % for i = 1:length(unique(indtest))
% %     text(V_sc(indtest==i,2)+dx, V_sc(indtest==i,3)+dy,subclasses(indtest==i),...
% %         'FontSize',12,'FontName','Times',...
% %         'HorizontalAlignment','center','Color',cmap_text(i,:));
% % end
% xlabel('V_2, L'); 
% ylabel('V_3, L'); 
% zlabel('V_4, L')
% % xlim(1.2*[min(V_sc(:,2)),max(V_sc(:,2))]);
% % ylim(1.2*[min(V_sc(:,3)),max(V_sc(:,3))]);
% set(gca,'FontSize',16,'FontName','Times');
% view([1 1 1])
% subplot(1,2,2); hold on;
% for i = 1:length(unique(indtest))
%     inds = indtest==i;
%     h = scatter3(V_pca(inds,1),V_pca(inds,2),V_pca(inds,3),markersizes(inds),cmap_all(inds,:),'filled',...
%         'MarkerEdgeColor',cmap_base(i,:),'LineWidth',3);
%     h.MarkerFaceAlpha = 0.5;
% end
% % dx = 0; dy = 0.02;
% % for i = 1:length(unique(indtest))
% %     text(V_sc(indtest==i,2)+dx, V_sc(indtest==i,3)+dy,subclasses(indtest==i),...
% %         'FontSize',12,'FontName','Times',...
% %         'HorizontalAlignment','center','Color',cmap_text(i,:));
% % end
% xlabel('PC_1'); 
% ylabel('PC_2'); 
% zlabel('PC_3')
% % xlim(1.2*[min(V_sc(:,2)),max(V_sc(:,2))]);
% % ylim(1.2*[min(V_sc(:,3)),max(V_sc(:,3))]);
% set(gca,'FontSize',16,'FontName','Times');
% view([1 1 1])
% sgtitle('Spatial, All Types','FontName','Times','FontSize',20)
% 
% %% 3.2.2 Spatial eigenanalysis (neurons only)
% % genemat_allgenes = genevct_allgenes;
% rng('default');
% clc
% nonneuronal_inds = ismember(subclasses,{'Endo','Astro','Oligo',...
%     'Micro-PVM','SMC-Peri','VLMC'});
% gaba_inds = ismember(subclasses,{'Lamp5','Sncg','Meis2','CR',...
%     'Pvalb','Sst','Sst Chodl','Vip'});
% ctxtest = @(x) strcmp(x(end),'X');
% glutctx_inds = logical(cell2mat(cellfun(ctxtest,subclasses,'UniformOutput',false)));
% gluthipp_inds = ~logical(nonneuronal_inds + gaba_inds + glutctx_inds);
% indcell = {glutctx_inds,gluthipp_inds,gaba_inds,nonneuronal_inds};
% indtest = glutctx_inds + 2*gluthipp_inds + 3*gaba_inds + 4*nonneuronal_inds;
% indtest(nonneuronal_inds) = [];
% cmap_col = [[0 0.75 1]; [1 0 0.5]];
% cmap_base = twocolor(cmap_col(1,:),cmap_col(2,:),length(indcell));
% cmap_text = zeros(length(indtest),3);
% for i = 1:length(unique(indtest))
%     cmap_text(indtest == i,:) = repmat(cmap_base(i,:),sum(indtest==i),1);
% end
% 
% ctmat = outstruct.Bmeans; 
% ctmat = ctmat / max(ctmat(:));
% ctmat_neuron = ctmat;
% ctmat_neuron(:,nonneuronal_inds) = [];
% ctmat_neuron = ctmat_neuron / max(ctmat_neuron(:));
% D_spatial_neuron = squareform(pdist(ctmat_neuron.','cosine'));
% S_spatial_neuron = max(D_spatial_neuron(:)) - D_spatial_neuron;
% % S_spatial = 1./D_spatial; 
% S_spatial(logical(eye(size(S_spatial)))) = 0;
% S_spatial_neuron = (S_spatial_neuron - min(S_spatial_neuron(:)))/...
%     (max(S_spatial_neuron(:))-min(S_spatial_neuron(:)));
% nodesign = sign(mean(corrmat_t).');
% cmapidx = (nodesign + 3)/2;
% cmap_all = NaN(length(nodesign),3);
% cmap = [[0 0 1]; [1 0 0]];
% for i = 1:size(cmap,1)
%     inds = cmapidx == i;
%     cmap_all(inds,:) = repmat(cmap(i,:),sum(inds),1);
% end
% markersizes = 2000*(abs(mean(corrmat_t).')).^(0.5);
% markersizes(nonneuronal_inds) = [];
% cmap_all(nonneuronal_inds,:) = [];
% % [~,V_sc] = spectralcluster(S_spatial,3,'Distance','precomputed');
% L_spat = diag(sum(S_spatial_neuron)) - S_spatial_neuron;
% % L_sc = eye(size(S_spatial_neuron)) - diag(sum(S_spatial_neuron))^(-1)*S_spatial_neuron;
% [V_spat,~] = eig(L_spat);
% [~,V_pca] = pca(ctmat_neuron.');
% 
% figure('Units','inches','Position',[0 0 25,8]); 
% subplot(1,2,1); hold on;
% for i = 1:length(unique(indtest))
%     inds = indtest==i;
%     h = scatter3(V_spat(inds,2),V_spat(inds,3),V_spat(inds,4),markersizes(inds),cmap_all(inds,:),'filled',...
%         'MarkerEdgeColor',cmap_base(i,:),'LineWidth',3);
%     h.MarkerFaceAlpha = 0.5;
% end
% % dx = 0; dy = 0.02;
% % for i = 1:length(unique(indtest))
% %     text(V_sc(indtest==i,2)+dx, V_sc(indtest==i,3)+dy,subclasses(indtest==i),...
% %         'FontSize',12,'FontName','Times',...
% %         'HorizontalAlignment','center','Color',cmap_text(i,:));
% % end
% xlabel('V_2, L'); 
% ylabel('V_3, L'); 
% zlabel('V_4, L')
% % xlim(1.2*[min(V_sc(:,2)),max(V_sc(:,2))]);
% % ylim(1.2*[min(V_sc(:,3)),max(V_sc(:,3))]);
% set(gca,'FontSize',16,'FontName','Times');
% view([1 1 1])
% subplot(1,2,2); hold on;
% for i = 1:length(unique(indtest))
%     inds = indtest==i;
%     h = scatter3(V_pca(inds,1),V_pca(inds,2),V_pca(inds,3),markersizes(inds),cmap_all(inds,:),'filled',...
%         'MarkerEdgeColor',cmap_base(i,:),'LineWidth',3);
%     h.MarkerFaceAlpha = 0.5;
% end
% % dx = 0; dy = 0.02;
% % for i = 1:length(unique(indtest))
% %     text(V_sc(indtest==i,2)+dx, V_sc(indtest==i,3)+dy,subclasses(indtest==i),...
% %         'FontSize',12,'FontName','Times',...
% %         'HorizontalAlignment','center','Color',cmap_text(i,:));
% % end
% xlabel('PC_1'); 
% ylabel('PC_2'); 
% zlabel('PC_3')
% % xlim(1.2*[min(V_sc(:,2)),max(V_sc(:,2))]);
% % ylim(1.2*[min(V_sc(:,3)),max(V_sc(:,3))]);
% set(gca,'FontSize',16,'FontName','Times');
% view([1 1 1])
% sgtitle('Spatial, Neurons Only','FontName','Times','FontSize',20)
% 
% %% 3.2.3. Gene eigenanalysis
% % genemat_allgenes = genevct_allgenes;
% rng('default');
% clc
% nonneuronal_inds = ismember(subclasses,{'Endo','Astro','Oligo',...
%     'Micro-PVM','SMC-Peri','VLMC'});
% gaba_inds = ismember(subclasses,{'Lamp5','Sncg','Meis2','CR',...
%     'Pvalb','Sst','Sst Chodl','Vip'});
% ctxtest = @(x) strcmp(x(end),'X');
% glutctx_inds = logical(cell2mat(cellfun(ctxtest,subclasses,'UniformOutput',false)));
% gluthipp_inds = ~logical(nonneuronal_inds + gaba_inds + glutctx_inds);
% indcell = {glutctx_inds,gluthipp_inds,gaba_inds,nonneuronal_inds};
% indtest = glutctx_inds + 2*gluthipp_inds + 3*gaba_inds + 4*nonneuronal_inds;
% cmap_col = [[0 0.75 1]; [1 0 0.5]];
% cmap_base = twocolor(cmap_col(1,:),cmap_col(2,:),length(indcell));
% cmap_text = zeros(length(indtest),3);
% for i = 1:length(unique(indtest))
%     cmap_text(indtest == i,:) = repmat(cmap_base(i,:),sum(indtest==i),1);
% end
% 
% genemat_MRx3 = genevct(sort(geneinds(1:outstruct.nGen)),:); 
% genemat_MRx3 = genemat_MRx3/max(genemat_MRx3(:));
% D_gene = squareform(pdist(genemat_MRx3.','correlation'));
% S_gene = max(D_gene(:)) - D_gene;
% % S_spatial = 1./D_spatial; 
% % S_gene = exp(1).^(-D_gene.^2);
% S_gene(logical(eye(size(S_gene)))) = 0;
% S_gene = (S_gene - min(S_gene(:)))/...
%     (max(S_gene(:))-min(S_gene(:)));
% S_gene(logical(eye(size(S_gene)))) = 0;
% % S_gene = corrcoef(genemat_MRx3); 
% % S_gene = (S_gene - min(S_gene(:)))/...
% %     (max(S_gene(:))-min(S_gene(:)));
% % S_gene = S_gene - eye(size(S_gene));
% % G_gene = graph(S_gene);
% % G_gene.Nodes.Names = subclasses;
% % edgeweights = G_gene.Edges.Weight;
% % edgeweights = zeros(length(edgeweights),1);
% % G_gene = rmedge(G_gene,find(edgeweights == 0));
% nodesign = sign(mean(corrmat_t).');
% cmapidx = (nodesign + 3)/2;
% cmap_all = NaN(length(nodesign),3);
% cmap = [[0 0 1]; [1 0 0]];
% for i = 1:size(cmap,1)
%     inds = cmapidx == i;
%     cmap_all(inds,:) = repmat(cmap(i,:),sum(inds),1);
% end
% markersizes = 2000*(abs(mean(corrmat_t).')).^(0.5);
% % [~,V_sc] = spectralcluster(S_gene,3,'Distance','precomputed');
% L_spat = diag(sum(S_gene)) - S_gene;
% [V_spat,~] = eig(L_spat);
% [~,V_pca] = pca(genemat_MRx3.');
% 
% figure('Units','inches','Position',[0 0 25,8]); 
% subplot(1,2,1);hold on;
% for i = 1:length(unique(indtest))
%     inds = indtest==i;
%     h = scatter3(V_spat(inds,2),V_spat(inds,3),V_spat(inds,4),markersizes(inds),cmap_all(inds,:),'filled',...
%         'MarkerEdgeColor',cmap_base(i,:),'LineWidth',3);
%     h.MarkerFaceAlpha = 0.5;
% end
% % h = scatter3(V_sc(:,2),V_sc(:,3),V_sc(:,4),markersizes,cmap_all,'filled');
% % h.MarkerFaceAlpha = 0.25;
% % dx = 0; dy = 0.03;
% % for i = 1:length(unique(indtest))
% %     text(V_sc(indtest==i,2)+dx, V_sc(indtest==i,3)+dy,subclasses(indtest==i),...
% %         'FontSize',12,'FontName','Times',...
% %         'HorizontalAlignment','center','Color',cmap_text(i,:));
% % end
% xlabel('V_2, L'); 
% ylabel('V_3, L'); 
% zlabel('V_4, L')
% % xlim([3*min(V_sc(:,2)),1.1*max(V_sc(:,2))]);
% % ylim(1.2*[min(V_sc(:,3)),max(V_sc(:,3))]);
% set(gca,'FontSize',16,'FontName','Times');
% view([1 1 1])
% subplot(1,2,2); hold on;
% for i = 1:length(unique(indtest))
%     inds = indtest==i;
%     h = scatter3(V_pca(inds,1),V_pca(inds,2),V_pca(inds,3),markersizes(inds),cmap_all(inds,:),'filled',...
%         'MarkerEdgeColor',cmap_base(i,:),'LineWidth',3);
%     h.MarkerFaceAlpha = 0.5;
% end
% % h = scatter(V_pca(:,1),V_pca(:,2),markersizes,cmap_all,'filled');
% % h.MarkerFaceAlpha = 0.25;
% % dx = 0; dy = 0.2;
% % for i = 1:length(unique(indtest))
% %     text(V_pca(indtest==i,1)+dx,V_pca(indtest==i,2)+dy,subclasses(indtest==i),...
% %         'FontSize',12,'FontName','Times',...
% %         'HorizontalAlignment','center','Color',cmap_text(i,:));
% % end
% xlabel('PC_1'); 
% ylabel('PC_2');
% zlabel('PC_3')
% % xlim([1.4*min(V_pca(:,1)),1.1*max(V_pca(:,1))]);
% % ylim(1.2*[min(V_pca(:,2)),max(V_pca(:,2))]);
% set(gca,'FontSize',16,'FontName','Times');
% view([1,1,1])
% sgtitle('Gene, All Types','FontName','Times','FontSize',20)
% 
% %% 3.2.4. Gene eigenanalysis, neurons onlyl
% % genemat_allgenes = genevct_allgenes;
% rng('default');
% clc
% nonneuronal_inds = ismember(subclasses,{'Endo','Astro','Oligo',...
%     'Micro-PVM','SMC-Peri','VLMC'});
% gaba_inds = ismember(subclasses,{'Lamp5','Sncg','Meis2','CR',...
%     'Pvalb','Sst','Sst Chodl','Vip'});
% ctxtest = @(x) strcmp(x(end),'X');
% glutctx_inds = logical(cell2mat(cellfun(ctxtest,subclasses,'UniformOutput',false)));
% gluthipp_inds = ~logical(nonneuronal_inds + gaba_inds + glutctx_inds);
% indcell = {glutctx_inds,gluthipp_inds,gaba_inds,nonneuronal_inds};
% indtest = glutctx_inds + 2*gluthipp_inds + 3*gaba_inds + 4*nonneuronal_inds;
% indtest(nonneuronal_inds) = [];
% cmap_col = [[0 0.75 1]; [1 0 0.5]];
% cmap_base = twocolor(cmap_col(1,:),cmap_col(2,:),length(indcell));
% % cmap_text = zeros(length(indtest),3);
% % for i = 1:length(unique(indtest))
% %     cmap_text(indtest == i,:) = repmat(cmap_base(i,:),sum(indtest==i),1);
% % end
% 
% genemat_MRx3 = genevct(sort(geneinds(1:outstruct.nGen)),:); 
% genemat_MRx3 = genemat_MRx3/max(genemat_MRx3(:));
% genemat_MRx3_neuron = genemat_MRx3;
% genemat_MRx3_neuron(:,nonneuronal_inds) = [];
% genemat_MRx3_neuron = genemat_MRx3_neuron/max(genemat_MRx3_neuron(:));
% S_gene_neuron = corrcoef(genemat_MRx3_neuron); 
% S_gene_neuron = (S_gene_neuron - min(S_gene_neuron(:)))/...
%     (max(S_gene_neuron(:))-min(S_gene_neuron(:)));
% S_gene_neuron = S_gene_neuron - eye(size(S_gene_neuron));
% nodesign = sign(mean(corrmat_t).');
% cmapidx = (nodesign + 3)/2;
% cmap_all = NaN(length(nodesign),3);
% cmap = [[0 0 1]; [1 0 0]];
% for i = 1:size(cmap,1)
%     inds = cmapidx == i;
%     cmap_all(inds,:) = repmat(cmap(i,:),sum(inds),1);
% end
% markersizes = 2000*(abs(mean(corrmat_t).')).^(0.5);
% markersizes(nonneuronal_inds) = [];
% cmap_all(nonneuronal_inds,:) = [];
% % [~,V_sc] = spectralcluster(S_gene,3,'Distance,'precomputed');
% L_spat = diag(sum(S_gene_neuron)) - S_gene_neuron;
% [V_spat,~] = eig(L_spat);
% [~,V_pca] = pca(genemat_MRx3_neuron.');
% 
% figure('Units','inches','Position',[0 0 25 8]); 
% subplot(1,2,1);hold on;
% for i = 1:length(unique(indtest))
%     inds = indtest==i;
%     h = scatter3(V_spat(inds,2),V_spat(inds,3),V_spat(inds,4),markersizes(inds),cmap_all(inds,:),'filled',...
%         'MarkerEdgeColor',cmap_base(i,:),'LineWidth',3);
%     h.MarkerFaceAlpha = 0.5;
% end
% % h = scatter3(V_sc(:,2),V_sc(:,3),V_sc(:,4),markersizes,cmap_all,'filled');
% % h.MarkerFaceAlpha = 0.25;
% % dx = 0; dy = 0.03;
% % for i = 1:length(unique(indtest))
% %     text(V_sc(indtest==i,2)+dx, V_sc(indtest==i,3)+dy,subclasses(indtest==i),...
% %         'FontSize',12,'FontName','Times',...
% %         'HorizontalAlignment','center','Color',cmap_text(i,:));
% % end
% xlabel('V_2, L'); 
% ylabel('V_3, L'); 
% zlabel('V_4, L')
% xlim([3*min(V_spat(:,2)),1.1*max(V_spat(:,2))]);
% ylim(1.2*[min(V_spat(:,3)),max(V_spat(:,3))]);
% set(gca,'FontSize',16,'FontName','Times');
% view([1 1 1])
% subplot(1,2,2); hold on;
% for i = 1:length(unique(indtest))
%     inds = indtest==i;
%     h = scatter3(V_pca(inds,1),V_pca(inds,2),V_pca(inds,3),markersizes(inds),cmap_all(inds,:),'filled',...
%         'MarkerEdgeColor',cmap_base(i,:),'LineWidth',3);
%     h.MarkerFaceAlpha = 0.5;
% end
% % h = scatter(V_pca(:,1),V_pca(:,2),markersizes,cmap_all,'filled');
% % h.MarkerFaceAlpha = 0.25;
% % dx = 0; dy = 0.2;
% % for i = 1:length(unique(indtest))
% %     text(V_pca(indtest==i,1)+dx,V_pca(indtest==i,2)+dy,subclasses(indtest==i),...
% %         'FontSize',12,'FontName','Times',...
% %         'HorizontalAlignment','center','Color',cmap_text(i,:));
% % end
% xlabel('PC_1'); 
% ylabel('PC_2');
% zlabel('PC_3')
% % xlim([1.4*min(V_pca(:,1)),1.1*max(V_pca(:,1))]);
% % ylim(1.2*[min(V_pca(:,2)),max(V_pca(:,2))]);
% set(gca,'FontSize',16,'FontName','Times');
% view([1,1,1])
% sgtitle('Gene, Neurons Only','FontName','Times','FontSize',20)
% corrmat_t_mean = mean(corrmat_t);
% % corrmat_t_mean = corrmat_t_mean(~nonneuronal_inds);
% deltacorrmat_t = zeros(length(corrmat_t_mean));
% for i = 1:length(corrmat_t_mean)
%     for j = i:length(corrmat_t_mean)
% %         deltacorrmat_t(i,j) = abs(corrmat_t_mean(i) - corrmat_t_mean(j)) * (abs(corrmat_t_mean(i)) * abs(corrmat_t_mean(j)))^0.5;
% %     end
% % end
% % triinds = logical(triu(ones(length(corrmat_t_mean)),1));
% % triinds_hipp = 
% % distspat = distspat(triinds(:));
% % distgene = D_gene(~nonneuronal_inds,~nonneuronal_inds); 
% % distgene = distgene(triinds(:));
% % figure; subplot(1,2,1); scatter(distgene,deltacorr_t); xlabel('Gene Distance'); ylabel('|\DeltaR| with tau')
% % legend(sprintf('R = %.2f',corr(deltacorr_t,distgene)))
% % subplot(1,2,2); scatter(distspat,deltacorr_t); xlabel('Spatial Distance'); ylabel('|\DeltaR| with tau')
% % legend(sprintf('R = %.2f',corr(deltacorr_t,distspat)))
% distscell = cell(1,6); xlabs = {'Hipp Spat','Cort Spat',...
%     'Hipp-Cort Spat','Hipp Gene','Cort Gene','Hipp-Cort Gene'};
% distspat_hipp = D_spatial(:,gluthipp_inds);
% distspat_hipp(logical(gluthipp_inds+nonneuronal_inds),:) = [];
% distscell{1} = distspat_hipp(:);   
% distgene_hipp = D_gene(:,gluthipp_inds);
% distgene_hipp(logical(gluthipp_inds+nonneuronal_inds),:) = [];
% distscell{4} = distgene_hipp(:);  
% distspat_hippneo = D_spatial(glutctx_inds,gluthipp_inds);
% distscell{3} = distspat_hippneo(:);
% 
% distspat_neo = D_spatial(:,glutctx_inds);
% distspat_neo(logical(glutctx_inds+nonneuronal_inds),:) = [];
% distscell{2} = distspat_neo(:);   
% distgene_neo = D_gene(:,glutctx_inds);
% distgene_neo(logical(glutctx_inds+nonneuronal_inds),:) = [];
% distscell{5} = distgene_neo(:);  
% distgene_hippneo = D_gene(glutctx_inds,gluthipp_inds);
% distscell{6} = distgene_hippneo(:);
% figure;
% violin(distscell); xticks(1:6); xticklabels(xlabs); ylabel('Distance')%%
% meancorrs = mean(corrmat_t);
% signcorrs = sign(meancorrs).'; 
% subclasses_bic_sel = {};
% for i = 1:length(datsetnames)
%     subclasses_bic_i = subclasses_bic{i};
%     for j = 1:length(subclasses_bic_i)
%         subclasses_bic_sel = [subclasses_bic_sel, subclasses_bic_i{j}];
%     end
% end
% subclasses_bic_sel = unique(subclasses_bic_sel);
% sel_bic_inds = ismember(subclasses,subclasses_bic_sel);
% vuln_bic_inds = (sel_bic_inds + (signcorrs == 1)) == 2;
% res_bic_inds = (sel_bic_inds + (signcorrs == -1)) == 2;
% subclasses_bic_vuln = subclasses(vuln_bic_inds);
% subclasses_bic_res = subclasses(res_bic_inds);
% 
% [~,regvgene_] = Voxel_To_Region(voxvgene,matdir);
% corrmat_t_gene = CorrelationCalculator_singletimepoint(datsetnames,t,...
%     mousedata_struct,regvgene_,corrtype,seedcorr,matdir);
% signgenes = sign(mean(corrmat_t_gene));
% vulngenesinds = signgenes == 1; resgenesinds = signgenes == -1;
% vulngenes = gene_names(vulngenesinds); resgenes = gene_names(resgenesinds);
% corrmat_t_vulngenes = corrmat_t_gene(:,vulngenesinds);
% corrmat_t_resgenes = corrmat_t_gene(:,resgenesinds);
% prct_vuln_90 = prctile(mean(corrmat_t_vulngenes),90);
% prct_res_90 = prctile(mean(corrmat_t_resgenes),10);
% vulngenes_90 = vulngenes(mean(corrmat_t_vulngenes) > prct_vuln_90);
% resgenes_90 = resgenes(mean(corrmat_t_resgenes) < prct_res_90);
% 
% ctmean_col = mean(genevct);
% ctnorm_col = genevct ./ repmat(ctmean_col,size(genevct,1),1); % cell size correction
% ctmean_row = mean(ctnorm_col,2); ctstd_row = std(ctnorm_col,[],2);
% zscore_row = (ctnorm_col - repmat(ctmean_row,1,size(genevct,2))) ./ repmat(ctstd_row,1,size(genevct,2)); % z-score per gene
% zscore_row(isnan(zscore_row)) = -Inf;
% ctnorm_col_vuln = ctnorm_col(:,vuln_bic_inds); ctnorm_col_res = ctnorm_col(:,res_bic_inds);
% zscore_row_vuln = zscore_row(:,vuln_bic_inds); zscore_row_res = zscore_row(:,res_bic_inds);
% numgenes_vuln = round(length(vulngenes_90)/length(subclasses_bic_vuln));
% ctvulngenes_90 = {};
% for i = 1:length(subclasses_bic_vuln)
%     ctexpr = zscore_row_vuln(:,i);
%     [~,zinds] = sort(ctexpr,'descend');
%     zinds_90 = zinds(1:numgenes_vuln);
%     ctvulngenes_90 = [ctvulngenes_90,gene_names(zinds_90)];
% end
% ctvulngenes_90 = unique(ctvulngenes_90);
% numgenes_res = 20;
% ctresgenes_90 = {};
% for i = 6
%     ctexpr = zscore_row_res(:,i);
%     [~,zinds] = sort(ctexpr,'descend');
%     zinds_90 = zinds(1:numgenes_res);
%     ctresgenes_90 = [ctresgenes_90,gene_names(zinds_90)];
% end
% ctresgenes_90 = unique(ctresgenes_90);
% 
% dicecalc = @(a,b) 2*length(intersect(a,b))/(length(a) + length(b));
% fprintf('Number Vuln Genes ~ %d, Number Intersect = %d \n',round(length(ctvulngenes_90)/2 + length(vulngenes_90)/2),length(intersect(ctvulngenes_90,vulngenes_90)))
% fprintf('Vulnerable Gene Dice Score = %.2f \n',dicecalc(ctvulngenes_90,vulngenes_90))
% fprintf('Number Res Genes ~ %d, Number Intersect = %d \n',round(length(ctresgenes_90)/2 + length(resgenes_90)/2),length(intersect(ctresgenes_90,resgenes_90)))
% fprintf('Resilience Gene Dice Score = %.2f \n',dicecalc(ctresgenes_90,resgenes_90))
% vulngene_intersect = intersect(ctvulngenes_90,vulngenes_90);
% resgene_intersect = intersect(ctresgenes_90,resgenes_90);


% %% 1.1 scRNAseq clustering schematic
% savenclose = 0;
% usetSNE = 0;
% useScatter = 1;
% cmap = [[0 0.75 1]; [1 0 0.5]];
% ClusteringSchematic(genevct(geneinds(1:outstruct.nGen),:),subclasses,cmap,useScatter,usetSNE,savenclose,figdirectory);

