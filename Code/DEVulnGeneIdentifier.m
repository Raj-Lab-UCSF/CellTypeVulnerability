function degenestruct = DEVulnGeneIdentifier(corrmat_t_ct_,subclasses_sel,subclasses_,genevct_,corrmat_t_gene_,genenames_,thresh_)
% Separate out linear model cell types by vulnerable/resilience (based on univariate correlation) 
meancorrs = mean(corrmat_t_ct_);
signcorrs = sign(meancorrs).'; 
subclasses_sel_1d = {};
for i = 1:size(corrmat_t_ct_,1)
    subclasses_sel_i = subclasses_sel{i};
    for j = 1:length(subclasses_sel_i)
        subclasses_sel_1d = [subclasses_sel_1d, subclasses_sel_i{j}];
    end
end
subclasses_sel_1d = unique(subclasses_sel_1d);
sel_inds = ismember(subclasses_,subclasses_sel_1d);
vuln_sel_inds = (sel_inds + (signcorrs == 1)) == 2;
res_sel_inds = (sel_inds + (signcorrs == -1)) == 2;
subclasses_sel_vuln = subclasses_(vuln_sel_inds);
subclasses_sel_res = subclasses_(res_sel_inds);

% Identify top vulnerable/resilient genes by univariate correlation
signgenes = sign(mean(corrmat_t_gene_));
vulngenesinds = signgenes == 1; resgenesinds = signgenes == -1;
vulngenes = genenames_(vulngenesinds); resgenes = genenames_(resgenesinds);
corrmat_t_vulngenes = corrmat_t_gene_(:,vulngenesinds);
corrmat_t_resgenes = corrmat_t_gene_(:,resgenesinds);
prct_vuln_thresh = prctile(mean(corrmat_t_vulngenes),thresh_);
prct_res_thresh = prctile(mean(corrmat_t_resgenes),100-thresh_);
vulngenes_thresh = vulngenes(mean(corrmat_t_vulngenes) > prct_vuln_thresh);
resgenes_thresh = resgenes(mean(corrmat_t_resgenes) < prct_res_thresh);

% Identify differentially expressed genes in vulnerable/resilient cell
% types
ctmean_col = mean(genevct_);
ctnorm_col = genevct_ ./ repmat(ctmean_col,size(genevct_,1),1); % cell size correction
ctmean_row = mean(ctnorm_col,2); ctstd_row = std(ctnorm_col,[],2);
zscore_row = (ctnorm_col - repmat(ctmean_row,1,size(genevct_,2))) ./ repmat(ctstd_row,1,size(genevct_,2)); % z-score per gene across all types
zscore_row(isnan(zscore_row)) = -Inf;
zscore_row_vuln = zscore_row(:,vuln_sel_inds); 
zscore_row_res = zscore_row(:,res_sel_inds);
numgenes_vuln = round(length(vulngenes_thresh)/length(subclasses_sel_vuln)); % same number of genes per cell type & approximately the same set size
ctvulngenes_thresh = {};
for i = 1:length(subclasses_sel_vuln)
    ctexpr = zscore_row_vuln(:,i);
    [~,zinds] = sort(ctexpr,'descend');
    zinds_thresh = zinds(1:numgenes_vuln);
    ctvulngenes_thresh = [ctvulngenes_thresh,genenames_(zinds_thresh)];
end
ctvulngenes_thresh = unique(ctvulngenes_thresh);
numgenes_res = round(length(resgenes_thresh)/length(subclasses_sel_res));
ctresgenes_thresh = {};
for i = 1:length(subclasses_sel_res)
    ctexpr = zscore_row_res(:,i);
    [~,zinds] = sort(ctexpr,'descend');
    zinds_thresh = zinds(1:numgenes_res);
    ctresgenes_thresh = [ctresgenes_thresh,genenames_(zinds_thresh)];
end
ctresgenes_thresh = unique(ctresgenes_thresh);

% Store information
dicecalc = @(a,b) 2*length(intersect(a,b))/(length(a) + length(b));
degenestruct = struct;
degenestruct.VulnerableGenes = vulngenes_thresh;
degenestruct.VulnerableCTGenes = ctvulngenes_thresh;
degenestruct.VulnerableIntersect = intersect(vulngenes_thresh,ctvulngenes_thresh);
degenestruct.DiceScoreVul = dicecalc(vulngenes_thresh,ctvulngenes_thresh); 
degenestruct.ResilienceGenes = resgenes_thresh;
degenestruct.ResilienceCTGenes = ctresgenes_thresh;
degenestruct.ResilienceIntersect = intersect(resgenes_thresh,ctresgenes_thresh);
degenestruct.DiceScoreRes = dicecalc(resgenes_thresh,ctresgenes_thresh); 
degenestruct.threshold = thresh_;

% ctmean = mean(genemat_,1);
% ctmean = repmat(ctmean,size(genemat_,1),1);
% ctnorm = genemat_ ./ ctmean;
% % ctnorm(ctnorm<(0.1*std(nonzeros(ctnorm)))) = 0; % filter out excessively small signal
% C_cellnorm = ctnorm;
% zeroinds = false(1,size(C_cellnorm,1));
% for i = 1:length(zeroinds)
%     zeroinds(i) = all(C_cellnorm(i,:) == 0);
% end
% C_cellnorm(zeroinds,:) = [];
% genenames_(zeroinds) = [];
% 
% % Fcalc = @(g) sum((g - mean(g)).^2)/(length(g) - 1);
% % Fvec = zeros(1,size(C_cellnorm,1));
% % for i = 1:length(Fvec)
% %     g_ct = C_cellnorm(i,:);
% %     Fvec(i) = Fcalc(g_ct);
% % end
% % [~,sortinds] = sort(Fvec,'descend');
% % C_sort = C_cellnorm(sortinds,:);
% % gns_sort = genenames_(sortinds);
% % n_lowde = round(thresh_*size(C_cellnorm,1)/100);
% % n_highde = size(C_cellnorm,1) - n_lowde;
% % C_highde = C_sort;
% % gns_highde = gns_sort;
% 
% % C_mean = mean(C_cellnorm,2);
% % C_std = std(C_cellnorm,[],2);
% % zscore_mat = (C_cellnorm - repmat(C_mean,1,size(C_cellnorm,2)))./repmat(C_std,1,size(C_cellnorm,2));
% threshval = median(nonzeros(C_cellnorm(:))) * thresh_;
% 
% de_genes = cell(2,length(cts_));
% de_genes(1,:) = subclasses_(ismember(subclasses_,cts_));
% for i = 1:length(cts_)
%     ind = ismember(subclasses_,cts_{i});
%     g_i = C_cellnorm(:,ind);
%     C_cellnorm_i = C_cellnorm;
%     C_cellnorm_i(g_i < threshval,:) = [];
%     genenames_i = genenames_;
%     genenames_i(g_i < threshval) = [];
%     C_mean = mean(C_cellnorm_i,2);
%     C_std = std(C_cellnorm_i,[],2);
%     zscore_mat = (C_cellnorm_i - repmat(C_mean,1,size(C_cellnorm_i,2)))./repmat(C_std,1,size(C_cellnorm_i,2));
%     zscore_i = zscore_mat(:,ind);
%     [~,sortinds_i] = sort(zscore_i,'descend');
%     de_genes{2,i} = genenames_i(sortinds_i(1:ngenes_));
% end
% % for i = 1:length(cts_)
%     Rvals_i = zeros(1,length(gns_highde));
%     for j = 1:length(Rvals_i)
%         Rvals_i(j) = corr(ismember(subclasses_,cts_{i}),C_highde(j,:).');
%         if isnan(Rvals_i(j))
%             Rvals_i(j) = -Inf;
%         end
%     end
%     [~,sortinds_i] = sort(Rvals_i,'descend');
% %     C_highde_i = C_highde(:,i);
% %     [~,sortinds_i] = sort(C_highde_i,'descend');
%     de_genes{2,i} = gns_highde(sortinds_i(1:ngenes_));
% end

end